<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>visualisation on head spin - the Heads or Tails blog</title>
    <link>https://heads0rtai1s.github.io/categories/visualisation/</link>
    <description>Recent content in visualisation on head spin - the Heads or Tails blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Apr 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://heads0rtai1s.github.io/categories/visualisation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Animations in the time of Coronavirus</title>
      <link>https://heads0rtai1s.github.io/2020/04/30/animate-map-covid/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://heads0rtai1s.github.io/2020/04/30/animate-map-covid/</guid>
      <description>
&lt;script src=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;The first four months of 2020 have been dominated by the Coronavirus pandemic (aka COVID-19), which has transformed global life in an unprecedented way. Societies and economies struggle to adapt to the new conditions and necessary contraints. A reassuringly large fraction of governments around the world continue to take evidence-based approaches to this crisis that are grounded in large scale data collection efforts. Most of this data is being made publicly available and can be studied in real time. This post will describe how to extract and prepare the necessary data to animate the spread of the virus over time within my native country of Germany.&lt;/p&gt;
&lt;p&gt;I have published a pre-processed version of the relevant data for this project as a &lt;a href=&#34;https://www.kaggle.com/headsortails/covid19-tracking-germany&#34;&gt;Kaggle dataset&lt;/a&gt;, together with the geospatial shape files you need to plot the resulting map. This post outlines how to build that dataset from the original source data using a set of &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt; tools. Then we will use the &lt;a href=&#34;https://github.com/thomasp85/gganimate&#34;&gt;gganimate&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/sf/index.html&#34;&gt;sf&lt;/a&gt; packages to create animated map visuals.&lt;/p&gt;
&lt;p&gt;Those are the packages we need:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;libs &amp;lt;- c(&amp;#39;dplyr&amp;#39;, &amp;#39;tibble&amp;#39;,      # wrangling
          &amp;#39;stringr&amp;#39;, &amp;#39;readr&amp;#39;,     # strings, input
          &amp;#39;lubridate&amp;#39;, &amp;#39;tidyr&amp;#39;,   # time, wrangling
          &amp;#39;knitr&amp;#39;, &amp;#39;kableExtra&amp;#39;,  # table styling
          &amp;#39;ggplot2&amp;#39;, &amp;#39;viridis&amp;#39;,   # visuals
          &amp;#39;gganimate&amp;#39;, &amp;#39;sf&amp;#39;,      # animations, maps
          &amp;#39;ggthemes&amp;#39;)             # visuals
invisible(lapply(libs, library, character.only = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The COVID-19 data for Germany are being collected by the &lt;a href=&#34;https://www.rki.de/EN/Home/homepage_node.html&#34;&gt;Robert Koch Institute&lt;/a&gt; and can be download through the &lt;a href=&#34;https://npgeo-corona-npgeo-de.hub.arcgis.com/&#34;&gt;National Platform for Geographic Data&lt;/a&gt; (which also hosts an interactive dashboard). The earliest recorded cases are from 2020-01-24. Here we define the corresponding link and read the dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;infile &amp;lt;- &amp;quot;https://opendata.arcgis.com/datasets/dd4580c810204019a7b8eb3e0b329dd6_0.csv&amp;quot;
covid_de &amp;lt;- read_csv(infile, col_types = cols())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This data contains a number of columns which are, unsurprisingly, named in German:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;covid_de %&amp;gt;% 
  head(5) %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 5
## Variables: 18
## $ FID                  &amp;lt;dbl&amp;gt; 4281356, 4281357, 4281358, 4281359, 4281360
## $ IdBundesland         &amp;lt;dbl&amp;gt; 1, 1, 1, 1, 1
## $ Bundesland           &amp;lt;chr&amp;gt; &amp;quot;Schleswig-Holstein&amp;quot;, &amp;quot;Schleswig-Holstein&amp;quot;,…
## $ Landkreis            &amp;lt;chr&amp;gt; &amp;quot;SK Flensburg&amp;quot;, &amp;quot;SK Flensburg&amp;quot;, &amp;quot;SK Flensbu…
## $ Altersgruppe         &amp;lt;chr&amp;gt; &amp;quot;A15-A34&amp;quot;, &amp;quot;A15-A34&amp;quot;, &amp;quot;A15-A34&amp;quot;, &amp;quot;A15-A34&amp;quot;,…
## $ Geschlecht           &amp;lt;chr&amp;gt; &amp;quot;M&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;M&amp;quot;
## $ AnzahlFall           &amp;lt;dbl&amp;gt; 1, 1, 1, 1, 1
## $ AnzahlTodesfall      &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0
## $ Meldedatum           &amp;lt;chr&amp;gt; &amp;quot;2020/03/14 00:00:00&amp;quot;, &amp;quot;2020/03/19 00:00:00…
## $ IdLandkreis          &amp;lt;chr&amp;gt; &amp;quot;01001&amp;quot;, &amp;quot;01001&amp;quot;, &amp;quot;01001&amp;quot;, &amp;quot;01001&amp;quot;, &amp;quot;01001&amp;quot;
## $ Datenstand           &amp;lt;chr&amp;gt; &amp;quot;30.04.2020, 00:00 Uhr&amp;quot;, &amp;quot;30.04.2020, 00:00…
## $ NeuerFall            &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0
## $ NeuerTodesfall       &amp;lt;dbl&amp;gt; -9, -9, -9, -9, -9
## $ Refdatum             &amp;lt;chr&amp;gt; &amp;quot;2020/03/16 00:00:00&amp;quot;, &amp;quot;2020/03/13 00:00:00…
## $ NeuGenesen           &amp;lt;dbl&amp;gt; 0, 0, 0, 0, 0
## $ AnzahlGenesen        &amp;lt;dbl&amp;gt; 1, 1, 1, 1, 1
## $ IstErkrankungsbeginn &amp;lt;dbl&amp;gt; 1, 1, 1, 1, 1
## $ Altersgruppe2        &amp;lt;chr&amp;gt; &amp;quot;nicht übermittelt&amp;quot;, &amp;quot;nicht übermittelt&amp;quot;, &amp;quot;…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following code block reshapes and translates the data to make it better accessible. This includes replacing our beloved German umlauts with simplified diphthongs, creating age groups, and aggregating COVID-19 numbers by county, age group, gender, and date:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;covid_de &amp;lt;- covid_de %&amp;gt;% 
  select(state = Bundesland,
         county = Landkreis,
         age_group = Altersgruppe,
         gender = Geschlecht,
         cases = AnzahlFall,
         deaths = AnzahlTodesfall,
         recovered = AnzahlGenesen,
         date = Meldedatum) %&amp;gt;% 
  mutate(date = date(date)) %&amp;gt;% 
  mutate(age_group = str_remove_all(age_group, &amp;quot;A&amp;quot;)) %&amp;gt;% 
  mutate(age_group = case_when(
    age_group == &amp;quot;unbekannt&amp;quot; ~ NA_character_,
    age_group == &amp;quot;80+&amp;quot; ~ &amp;quot;80-99&amp;quot;,
    TRUE ~ age_group
  )) %&amp;gt;% 
  mutate(gender = case_when(
    gender == &amp;quot;W&amp;quot; ~ &amp;quot;F&amp;quot;,
    gender == &amp;quot;unbekannt&amp;quot; ~ NA_character_,
    TRUE ~ gender
  )) %&amp;gt;% 
  group_by(state, county, age_group, gender, date) %&amp;gt;% 
  summarise(cases = sum(cases),
            deaths = sum(deaths),
            recovered = sum(recovered)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  filter(cases &amp;gt;= 0 &amp;amp; deaths &amp;gt;= 0) %&amp;gt;%
  filter(date &amp;lt; today()) %&amp;gt;% 
  mutate(state = str_replace_all(state, &amp;quot;ü&amp;quot;, &amp;quot;ue&amp;quot;)) %&amp;gt;% 
  mutate(state = str_replace_all(state, &amp;quot;ä&amp;quot;, &amp;quot;ae&amp;quot;)) %&amp;gt;% 
  mutate(state = str_replace_all(state, &amp;quot;ö&amp;quot;, &amp;quot;oe&amp;quot;)) %&amp;gt;% 
  mutate(state = str_replace_all(state, &amp;quot;ß&amp;quot;, &amp;quot;ss&amp;quot;)) %&amp;gt;% 
  mutate(county = str_replace_all(county, &amp;quot;ü&amp;quot;, &amp;quot;ue&amp;quot;)) %&amp;gt;% 
  mutate(county = str_replace_all(county, &amp;quot;ä&amp;quot;, &amp;quot;ae&amp;quot;)) %&amp;gt;% 
  mutate(county = str_replace_all(county, &amp;quot;ö&amp;quot;, &amp;quot;oe&amp;quot;)) %&amp;gt;% 
  mutate(county = str_replace_all(county, &amp;quot;ß&amp;quot;, &amp;quot;ss&amp;quot;)) %&amp;gt;% 
  mutate(county = str_remove(county, &amp;quot;\\(.+\\)&amp;quot;)) %&amp;gt;% 
  mutate(county = str_trim(county)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result is a dataset that lists daily (&lt;em&gt;not cumulative!&lt;/em&gt;) cases, deaths, and recovered cases for 6 age groups, gender, and the German counties and their corresponding federal states. Similar to the US, Germany has a federal system in which the 16 federal states have a large amout of legislative power. The German equivalent of the US county is the “Kreis”, which can either be associated with a city (“Stadtkreis” = “SK”) or the country side (“Landkreis” = “LK”). Here only a subset of columns are shown for reasons of clarity:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;covid_de %&amp;gt;%
  filter(state == &amp;quot;Sachsen&amp;quot;) %&amp;gt;% 
  select(-deaths, -recovered) %&amp;gt;% 
  head(5) %&amp;gt;% 
  kable() %&amp;gt;% 
  column_spec(1:6, width = c(&amp;quot;15%&amp;quot;, &amp;quot;25%&amp;quot;, &amp;quot;15%&amp;quot;, &amp;quot;10%&amp;quot;, &amp;quot;25%&amp;quot;, &amp;quot;10%&amp;quot;)) %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
state
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
county
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
age_group
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
gender
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
cases
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
Sachsen
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
LK Bautzen
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
00-04
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
F
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
2020-03-20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;width: 15%; &#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
Sachsen
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
LK Bautzen
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
00-04
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
F
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
2020-04-07
&lt;/td&gt;
&lt;td style=&#34;text-align:right;width: 15%; &#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
Sachsen
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
LK Bautzen
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
00-04
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
M
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
2020-03-21
&lt;/td&gt;
&lt;td style=&#34;text-align:right;width: 15%; &#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
Sachsen
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
LK Bautzen
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
05-14
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
F
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
2020-03-20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;width: 15%; &#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
Sachsen
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
LK Bautzen
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
05-14
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
F
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 15%; &#34;&gt;
2020-03-21
&lt;/td&gt;
&lt;td style=&#34;text-align:right;width: 15%; &#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This is the cleaned dataset which is available on &lt;a href=&#34;https://www.kaggle.com/headsortails/covid19-tracking-germany&#34;&gt;Kaggle&lt;/a&gt; as &lt;code&gt;covid_de.csv&lt;/code&gt;. With this data, you can already already slice and analyse Germany’s COVID-19 characteristics by various demographic and geographical features.&lt;/p&gt;
&lt;p&gt;However, for the maps that we’re interested in one more input is missing: shapefiles. A &lt;a href=&#34;https://en.wikipedia.org/wiki/Shapefile&#34;&gt;shapefile&lt;/a&gt; uses a standard vector format for specifying spatial geometries. It packages the map boundary data of the required entities (like countries, federal states) into a small set of related files. For this project, I found publicly available shapefiles on the state and county level provided by Germany’s &lt;a href=&#34;https://www.bkg.bund.de/EN/Home/home.html&#34;&gt;Federal Agency for Cartography and Geodesy&lt;/a&gt;. Both levels are available in the Kaggle dataset. Here I put the county level files (&lt;code&gt;de_county.*&lt;/code&gt;) into a local, static directory.&lt;/p&gt;
&lt;p&gt;Shapefiles can be read into R using the &lt;code&gt;sf&lt;/code&gt; package tool &lt;code&gt;st_read&lt;/code&gt;. In order to soon join them to our COVID-19 data, we need to do a bit of string translating and wrangling again. The &lt;code&gt;tidyr&lt;/code&gt; tool &lt;code&gt;unite&lt;/code&gt; is being used to combine the county type (&lt;code&gt;BEZ in c(&amp;quot;LK&amp;quot;, &amp;quot;SK&amp;quot;)&lt;/code&gt;) and county name into the format we have in our COVID-19 data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;shape_county &amp;lt;- st_read(str_c(&amp;quot;../../static/files/&amp;quot;, &amp;quot;de_county.shp&amp;quot;), quiet = TRUE) %&amp;gt;% 
  rename(county = GEN) %&amp;gt;% 
  select(county, BEZ, geometry) %&amp;gt;% 
  mutate(county = as.character(county)) %&amp;gt;% 
  mutate(county = str_replace_all(county, &amp;quot;ü&amp;quot;, &amp;quot;ue&amp;quot;)) %&amp;gt;% 
  mutate(county = str_replace_all(county, &amp;quot;ä&amp;quot;, &amp;quot;ae&amp;quot;)) %&amp;gt;% 
  mutate(county = str_replace_all(county, &amp;quot;ö&amp;quot;, &amp;quot;oe&amp;quot;)) %&amp;gt;% 
  mutate(county = str_replace_all(county, &amp;quot;ß&amp;quot;, &amp;quot;ss&amp;quot;)) %&amp;gt;% 
  mutate(county = str_remove(county, &amp;quot;\\(.+\\)&amp;quot;)) %&amp;gt;% 
  mutate(county = str_trim(county)) %&amp;gt;% 
  mutate(BEZ = case_when(
    BEZ == &amp;quot;Kreis&amp;quot; ~ &amp;quot;LK&amp;quot;,
    BEZ == &amp;quot;Landkreis&amp;quot; ~ &amp;quot;LK&amp;quot;,
    BEZ == &amp;quot;Stadtkreis&amp;quot; ~ &amp;quot;SK&amp;quot;,
    BEZ == &amp;quot;Kreisfreie Stadt&amp;quot; ~ &amp;quot;SK&amp;quot;
  )) %&amp;gt;% 
  unite(county, BEZ, county, sep = &amp;quot; &amp;quot;, remove = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this stage, there are still some county names that don’t match precisely. It would have been too easy, otherwise. These cases mostly come down to different styles of abbreviations being used for counties with longer names. A scalable way to deal with these wonders of the German language would be &lt;a href=&#34;https://cran.r-project.org/web/packages/fuzzyjoin/&#34;&gt;fuzzy matching&lt;/a&gt; by &lt;a href=&#34;https://cran.r-project.org/web/packages/stringdist/&#34;&gt;string distance&lt;/a&gt; similarities. Here, the number of mismatches is small and I decided to adjust them manually.&lt;/p&gt;
&lt;p&gt;Then, I group everything by &lt;code&gt;county&lt;/code&gt; and &lt;code&gt;date&lt;/code&gt; and sum over the remaining features. One major issue here is that not all counties will report numbers for all days. Those are small areas, after all. In this dataset, these cases are implicitely missing; i.e. the corresponding rows are just not present. It is important to convert those cases into explicitely missing entries: rows that have a count of zero. Otherwise, our eventual map will have “holes” in it for specific days and specific counties. The elegant solution in the code is made possible by the &lt;code&gt;tidyr&lt;/code&gt; function &lt;code&gt;complete&lt;/code&gt;: simply name all the columns for which we want to have all the combinations and specify how they should be filled. This approach applies to any situation where we have a set of features and need a complete grid of all possible combinations.&lt;/p&gt;
&lt;p&gt;Finally, we sum up the cumulative cases and deaths. Here, I also applied a &lt;code&gt;filter&lt;/code&gt; to extract data from March 1st - 31st only, to prevent the animation file from becoming too large. Feel free to expand this to a longer time frame:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;foo &amp;lt;- covid_de %&amp;gt;% 
  mutate(county = case_when(
    county == &amp;quot;Region Hannover&amp;quot; ~ &amp;quot;LK Region Hannover&amp;quot;,
    county == &amp;quot;SK Muelheim a.d.Ruhr&amp;quot; ~ &amp;quot;SK Muelheim an der Ruhr&amp;quot;,
    county == &amp;quot;StadtRegion Aachen&amp;quot; ~ &amp;quot;LK Staedteregion Aachen&amp;quot;,
    county == &amp;quot;SK Offenbach&amp;quot; ~ &amp;quot;SK Offenbach am Main&amp;quot;,
    county == &amp;quot;LK Bitburg-Pruem&amp;quot; ~ &amp;quot;LK Eifelkreis Bitburg-Pruem&amp;quot;,
    county == &amp;quot;SK Landau i.d.Pfalz&amp;quot; ~ &amp;quot;SK Landau in der Pfalz&amp;quot;,
    county == &amp;quot;SK Ludwigshafen&amp;quot; ~ &amp;quot;SK Ludwigshafen am Rhein&amp;quot;,
    county == &amp;quot;SK Neustadt a.d.Weinstrasse&amp;quot; ~ &amp;quot;SK Neustadt an der Weinstrasse&amp;quot;,
    county == &amp;quot;SK Freiburg i.Breisgau&amp;quot; ~ &amp;quot;SK Freiburg im Breisgau&amp;quot;,
    county == &amp;quot;LK Landsberg a.Lech&amp;quot; ~ &amp;quot;LK Landsberg am Lech&amp;quot;,
    county == &amp;quot;LK Muehldorf a.Inn&amp;quot; ~ &amp;quot;LK Muehldorf a. Inn&amp;quot;,
    county == &amp;quot;LK Pfaffenhofen a.d.Ilm&amp;quot; ~ &amp;quot;LK Pfaffenhofen a.d. Ilm&amp;quot;,
    county == &amp;quot;SK Weiden i.d.OPf.&amp;quot; ~ &amp;quot;SK Weiden i.d. OPf.&amp;quot;,
    county == &amp;quot;LK Neumarkt i.d.OPf.&amp;quot; ~ &amp;quot;LK Neumarkt i.d. OPf.&amp;quot;,
    county == &amp;quot;LK Neustadt a.d.Waldnaab&amp;quot; ~ &amp;quot;LK Neustadt a.d. Waldnaab&amp;quot;,
    county == &amp;quot;LK Wunsiedel i.Fichtelgebirge&amp;quot; ~ &amp;quot;LK Wunsiedel i. Fichtelgebirge&amp;quot;,
    county == &amp;quot;LK Neustadt a.d.Aisch-Bad Windsheim&amp;quot; ~ &amp;quot;LK Neustadt a.d. Aisch-Bad Windsheim&amp;quot;,
    county == &amp;quot;LK Dillingen a.d.Donau&amp;quot; ~ &amp;quot;LK Dillingen a.d. Donau&amp;quot;,
    county == &amp;quot;LK Stadtverband Saarbruecken&amp;quot; ~ &amp;quot;LK Regionalverband Saarbruecken&amp;quot;,
    county == &amp;quot;LK Saar-Pfalz-Kreis&amp;quot; ~ &amp;quot;LK Saarpfalz-Kreis&amp;quot;,
    county == &amp;quot;LK Sankt Wendel&amp;quot; ~ &amp;quot;LK St. Wendel&amp;quot;,
    county == &amp;quot;SK Brandenburg a.d.Havel&amp;quot; ~ &amp;quot;SK Brandenburg an der Havel&amp;quot;,
    str_detect(county, &amp;quot;Berlin&amp;quot;) ~ &amp;quot;SK Berlin&amp;quot;,
    TRUE ~ county
  )) %&amp;gt;% 
  group_by(county, date) %&amp;gt;% 
  summarise(cases = sum(cases),
            deaths = sum(deaths)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  complete(county, date, fill = list(cases = 0, deaths = 0)) %&amp;gt;% 
  group_by(county) %&amp;gt;% 
  mutate(cumul_cases = cumsum(cases),
         cumul_deaths = cumsum(deaths)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  filter(between(date, date(&amp;quot;2020-03-01&amp;quot;), date(&amp;quot;2020-03-31&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have all the ingredients for animating a county-level map of cumulative cases. Here we first define the animation object by specifying &lt;code&gt;geom_sf()&lt;/code&gt; and &lt;code&gt;theme_map()&lt;/code&gt; for the map style, then providing the animation steps column &lt;code&gt;date&lt;/code&gt; to the &lt;code&gt;transition_time()&lt;/code&gt; method. The advantage of &lt;a href=&#34;https://rdrr.io/github/thomasp85/gganimate/man/transition_time.html&#34;&gt;transition_time&lt;/a&gt; is that the length of transitions between steps takes is proportional to the intrinsic time differences. Here, we have a very well behaved dataset and all our steps are of length 1 day. Thus, we could also use &lt;code&gt;transition_states()&lt;/code&gt; directly. However, I consider it good practice to use &lt;code&gt;transition_time&lt;/code&gt; whenever actual time steps are involved; to be prepared for unequal time intervals.&lt;/p&gt;
&lt;p&gt;The animation parameters are provided in the &lt;code&gt;animate&lt;/code&gt; function, such as the transition style from one day to the next (&lt;code&gt;cubic-in-out&lt;/code&gt;), the animation speed (10 frames per s), or the size of the plot. For cumulative animations like this, it’s always a good idea to include an &lt;code&gt;end_pause&lt;/code&gt; freeze-frame, so that the reader can have a closer look at the final state before the loop begins anew:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gg &amp;lt;- shape_county %&amp;gt;% 
  right_join(foo, by = &amp;quot;county&amp;quot;) %&amp;gt;% 
  ggplot(aes(fill = cumul_cases)) +
  geom_sf() +
  scale_fill_viridis(trans = &amp;quot;log1p&amp;quot;, breaks = c(0, 10, 100, 1000)) +
  theme_map() +
  theme(title = element_text(size = 15), legend.text = element_text(size = 12),
        legend.title = element_text(size = 15)) +
  labs(title = &amp;quot;Total COVID-19 cases in Germany: {frame_time}&amp;quot;, fill = &amp;quot;Cases&amp;quot;) +
  transition_time(date)

animate(gg + ease_aes(&amp;#39;cubic-in-out&amp;#39;), fps = 10, end_pause = 25, height = 800, width = round(800/1.61803398875))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://heads0rtai1s.github.io/post/2020-04-30-animate-map-covid_files/figure-html/unnamed-chunk-8-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;Our final map shows how the number of COVID-19 cases in Germany first started to rise in the South and West, and how they spread to other parts of the country. The geographical middle of Germany appears to be lagging behind in case counts even at later times. Note the logarithmic colour scale.&lt;/p&gt;
&lt;p&gt;More info:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One caveat: This view does not take into account population density, which makes large cities like Berlin (north-east) stand out more towards the end. My Kaggle dataset currently includes population counts for the state-level only, but I’m planning to add county data in the near future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re looking for further inspiration on how to analyse this dataset then check out the various &lt;a href=&#34;https://www.kaggle.com/headsortails/covid19-tracking-germany/kernels&#34;&gt;Notebooks&lt;/a&gt; (aka “Kernels”) which are associated with it on Kaggle. Kaggle has the big advantage that you can run R or Python scripts and notebooks in a pretty powerful cloud environment; and present your work alongside datasets and competitions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another Kaggle dataset of mine with daily COVID-19 cases, deaths, and recoveries in the US can be found &lt;a href=&#34;https://www.kaggle.com/headsortails/covid19-us-county-jhu-data-demographics&#34;&gt;here&lt;/a&gt;. This data also has a county-level resolution. It is based on &lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series&#34;&gt;Johns Hopkins University data&lt;/a&gt; and I’m updating it on a daily basis.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>R Shiny for beginners: annotated starter code</title>
      <link>https://heads0rtai1s.github.io/2019/12/05/shiny-starter-code/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heads0rtai1s.github.io/2019/12/05/shiny-starter-code/</guid>
      <description>


&lt;p&gt;This week I decided to get started with the &lt;a href=&#34;https://shiny.rstudio.com&#34;&gt;R shiny&lt;/a&gt; package for interactive web applications. As an absolute beginner, I want to document my learning journey in the hope that it will be useful for other first-time shiny users.&lt;/p&gt;
&lt;p&gt;This post assumes some basic familiarity with &lt;a href=&#34;https://www.r-project.org&#34;&gt;R&lt;/a&gt; and the &lt;a href=&#34;https://www.tidyverse.org&#34;&gt;tidyverse&lt;/a&gt;, but no prior knowledge of shiny is required. The content is digested from the &lt;a href=&#34;https://shiny.rstudio.com/tutorial/&#34;&gt;official shiny tutorial&lt;/a&gt; which is great and definitely worth checking out for more details. All credit goes to them; I’m just trying to boil it down to the essentials to get you started within minutes.&lt;/p&gt;
&lt;p&gt;Below is the complete code for my first shiny app. Only 56 lines (a good chunk of which are comments and styling) in hopefully readable formatting. I considered it fitting to base it on the classic coin flip experiment which results in either Heads or Tails:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# preparations; required libraries
library(shiny)
library(dplyr)
library(tibble)
library(stringr)
library(ggplot2)

# the post url
post &amp;lt;- &amp;quot;https://heads0rtai1s.github.io/2019/12/05/shiny-starter-code/&amp;quot;

# user interface elements and layout
ui &amp;lt;- fluidPage(
  titlePanel(&amp;quot;Heads or Tails&amp;quot;),
  sidebarLayout(
    sidebarPanel(
      
      sliderInput(inputId = &amp;quot;n&amp;quot;, label = &amp;quot;Number of flips:&amp;quot;,
                  min = 10, max = 1000, value = 500),
      sliderInput(inputId = &amp;quot;prob&amp;quot;, label = &amp;quot;Success rate:&amp;quot;,
                  min = 0, max = 1, value = 0.5),
      
      tags$div(tags$p(HTML(&amp;quot;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
                        Find the annotated code&amp;quot;)),
               tags$a(href=post, &amp;quot;in this blog post.&amp;quot;))
      
    ),
    mainPanel(plotOutput(outputId = &amp;quot;bars&amp;quot;))
  )
)

# server-side computations
server &amp;lt;- function(input, output) {
  
  # the bar plot
  output$bars &amp;lt;- renderPlot({
    
    # most of this is for ggplot2; note the input$x syntax
    flips &amp;lt;- tibble(flips = rbinom(input$n, 1, input$prob)) %&amp;gt;% 
      mutate(flips = if_else(flips == 1, &amp;quot;Heads&amp;quot;, &amp;quot;Tails&amp;quot;))  
    
    flips %&amp;gt;% 
      count(flips) %&amp;gt;% 
      ggplot(aes(flips, n, fill = flips)) +
      geom_col() +
      geom_label(aes(flips, n, label = n), size = 5) +
      theme(legend.position = &amp;quot;none&amp;quot;,
            axis.text = element_text(size = 15)) +
      labs(x = &amp;quot;&amp;quot;, y = &amp;quot;&amp;quot;) +
      ggtitle(str_c(&amp;quot;Results of &amp;quot;, input$n,
                    &amp;quot; flips with Heads probability &amp;quot;,
                    sprintf(&amp;quot;%.2f&amp;quot;, input$prob)))
  })
}

# run it all
shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All you need to do at this stage is to (have the required libraries installed and) copy/paste the code above into an active R session. Try it out!&lt;/p&gt;
&lt;p&gt;This is the result you will get:&lt;/p&gt;
&lt;iframe src=&#34;https://headsortails.shinyapps.io/headsortails/&#34; width=&#34;900&#34; height=&#34;500&#34; frameborder=&#34;no&#34; scrolling=&#34;no&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;This app is embedded via &lt;a href=&#34;https://headsortails.shinyapps.io/headsortails/&#34;&gt;shinyapps.io&lt;/a&gt;. More about that later.&lt;/p&gt;
&lt;p&gt;The app allows you to choose the number of coin flips as well as the probability for Heads using slider bars. It visualises the resulting total numbers of Heads vs Tails as a reactive bar plot. Given the functionality of this app, 56 lines is not too bad, is it? Let’s dissect the code element by element!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Preparations:&lt;/strong&gt; Before we get to the interesting parts, the first five lines define and load the packages the script needs. This is unrelated to shiny (other than loading it):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(shiny)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note, that shiny web apps on shinyapps.io apparently need explicit &lt;code&gt;library&lt;/code&gt; calls and that my &lt;a href=&#34;https://heads0rtai1s.github.io/2019/11/07/tidy-curly-pivot-leaflet/&#34;&gt;normal approach&lt;/a&gt; of using &lt;code&gt;invisible(lapply())&lt;/code&gt; led to some confusing errors before I figured it out. Besides the libraries, I’m also including the url for this post as part of the preparation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The shiny code&lt;/strong&gt; is structured into two main elements: (i) a &lt;strong&gt;user interface (UI)&lt;/strong&gt; definition and layout, and (ii) the &lt;strong&gt;server-side computations&lt;/strong&gt; producing the data for plots (or tables, or other output elements). At the end, there is always a &lt;strong&gt;call to the &lt;code&gt;shinyApp&lt;/code&gt; function&lt;/strong&gt; which renders the whole thing.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;UI setup&lt;/strong&gt; starts with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ui &amp;lt;- fluidPage(&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which defines the internal name of the UI as &lt;code&gt;ui&lt;/code&gt; (&lt;em&gt;very surprising; I know&lt;/em&gt;). The &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/0.14/fluidPage.html&#34;&gt;fluidPage&lt;/a&gt; environment creates an output html that automatically adjusts to the size and shape of your viewer window. This seems to be the layout you would choose most often. The 2 alternatives are a &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/0.14/fixedPage.html&#34;&gt;fixedPage&lt;/a&gt; or a &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/0.14/navbarPage.html&#34;&gt;navbarPage&lt;/a&gt; which gives you a top-level navigation bar.&lt;/p&gt;
&lt;p&gt;Inside our &lt;code&gt;fluidPage&lt;/code&gt; we have the UI elements. The first one gives your app a title:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;titlePanel(&amp;quot;Heads or Tails&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing too complex here. The next element is the &lt;code&gt;sidebarLayout&lt;/code&gt;; as in “a layout that contains a sidebar” (as opposed to “a layout for the sidebar only”).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sidebarLayout(
    sidebarPanel(...),
    mainPanel(...)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This layout has always two elements: the &lt;code&gt;sidebarPanel&lt;/code&gt; and the &lt;code&gt;mainPanel&lt;/code&gt;. You can browse other layout options &lt;a href=&#34;https://shiny.rstudio.com/articles/layout-guide.html&#34;&gt;here&lt;/a&gt;, including grids and tabs.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sidebarPanel&lt;/code&gt; typically contains the &lt;a href=&#34;https://shiny.rstudio.com/tutorial/written-tutorial/lesson3/&#34;&gt;control widgets&lt;/a&gt;. Those widgets are what the users interact with.&lt;/p&gt;
&lt;p&gt;Here, we are using a &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/latest/sliderInput.html&#34;&gt;sliderInput&lt;/a&gt; to allow the user to select the number of coin flips (in a range from 10 - 1000) and the probability for Heads (in a range from 0 - 1):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sidebarPanel(
  sliderInput(inputId = &amp;quot;n&amp;quot;, label = &amp;quot;Number of flips:&amp;quot;,
              min = 10, max = 1000, value = 500),
  sliderInput(inputId = &amp;quot;prob&amp;quot;, label = &amp;quot;Success rate:&amp;quot;,
              min = 0, max = 1, value = 0.5),
  
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both sliders have the same syntax:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, and &lt;code&gt;value&lt;/code&gt; define the slider range and the default value at which the slider sits upon loading the app. Those parameters are specific to the slider widget.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;label&lt;/code&gt; is the text explaining to the user what the slider is being used for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;inputID&lt;/code&gt; is important, since it will be used in the server-side part of the app to assign inputs to outputs. Note, that we call the number of flips &lt;code&gt;n&lt;/code&gt; and the probability for Heads &lt;code&gt;prob&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other &lt;a href=&#34;https://shiny.rstudio.com/gallery/widget-gallery.html&#34;&gt;available widgets&lt;/a&gt; include checkboxes, radio buttons, or text input; each with their own specific parameters besides &lt;code&gt;InputID&lt;/code&gt; and &lt;code&gt;label&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ǹote, that besides widgets and plots, &lt;a href=&#34;https://shiny.rstudio.com/articles/tag-glossary.html&#34;&gt;html content or formatting&lt;/a&gt; can be added inside a &lt;code&gt;Panel&lt;/code&gt; method. In the code I’m inserting a short paragraph and the hyperlink to this blog post:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tags$div(tags$p(HTML(&amp;quot;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
                        Find the annotated code&amp;quot;)),
               tags$a(href=post, &amp;quot;in this blog post.&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Shiny tags like &lt;code&gt;tag$p&lt;/code&gt; or &lt;code&gt;tag$a&lt;/code&gt; are named after their HTML equivalents. Raw HTML needs to wrapped via the &lt;code&gt;HTML()&lt;/code&gt; function (thanks &lt;a href=&#34;https://stackoverflow.com/questions/46882025/r-shiny-break-line-in-button-label/46882196#46882196&#34;&gt;stackoverflow&lt;/a&gt;!). The line breaks are there for aesthetic reasons, to make the height of the sidebar and main boxes roughly the same.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;mainPanel&lt;/code&gt; typically contains the rendered reactive output. This object will change immediately when the user selects a different input (here via the sliders). We choose a plot because plots are awesome:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mainPanel(plotOutput(outputId = &amp;quot;bars&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;similar to the &lt;code&gt;inputID&lt;/code&gt; above, the &lt;code&gt;outputID&lt;/code&gt; connects UI elements to server computations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;besides the &lt;code&gt;plotOutput&lt;/code&gt; function, there are &lt;a href=&#34;https://shiny.rstudio.com/tutorial/written-tutorial/lesson4/&#34;&gt;other functions&lt;/a&gt; to produce tables, images, text, and more.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now the 2nd part: the &lt;strong&gt;server setup&lt;/strong&gt;. Here is where all the computations happen that produce the data for our output elements based on the input parameters. This part is close to a typical R workflow, in that you build your plots or tables to communicate insights. The only difference is that parameters are passed from the input UI, and that none of the possible parameters should break your plots.&lt;/p&gt;
&lt;p&gt;In the code, the &lt;code&gt;server&lt;/code&gt; function builds a list-like object &lt;code&gt;output&lt;/code&gt; based on the user &lt;code&gt;input&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server &amp;lt;- function(input, output) {
  
  output$bars &amp;lt;- renderPlot({})

}&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We define a single output: a plot via &lt;code&gt;renderPlot&lt;/code&gt;. Other &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/1.0.5/&#34;&gt;render function&lt;/a&gt; include &lt;code&gt;renderImage&lt;/code&gt; or &lt;code&gt;renderTable&lt;/code&gt;. You can add as many output elements as you need.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The plot is assigned to &lt;code&gt;output$bars&lt;/code&gt;. This means that it becomes an element in the &lt;code&gt;output&lt;/code&gt; list (the only element in our case). The name &lt;code&gt;bars&lt;/code&gt; needs to match the &lt;code&gt;outputId = &amp;quot;bars&amp;quot;&lt;/code&gt; in our UI &lt;code&gt;mainPanel&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, the code inside &lt;code&gt;renderPlot&lt;/code&gt; is re-run every time the user changes the input parameters. In our example, I used some ggplot2 styling to make the plot look nicer. Here is an alternative one-liner using only base R, to emphasise the shiny elements. Go on and replace the &lt;code&gt;renderPlot&lt;/code&gt; call in the starter code with this one to see what happens:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output$bars &amp;lt;- renderPlot({
    barplot(table( rbinom(input$n, 1, input$prob) ))
  })&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In both versions, the &lt;code&gt;rbinom&lt;/code&gt; function does all the work by creating a list of &lt;code&gt;n&lt;/code&gt; random numbers following a &lt;a href=&#34;https://en.wikipedia.org/wiki/Binomial_distribution&#34;&gt;binomial distribution&lt;/a&gt; with a success probability of &lt;code&gt;prob&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note, how the two input parameters are being passed as elements of the &lt;code&gt;input&lt;/code&gt; object. Their names, &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;prob&lt;/code&gt; need to match the respective &lt;code&gt;inputId&lt;/code&gt;s in the UI part.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, don’t forget the line that &lt;strong&gt;runs the whole thing:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s it! This is the main technical concept. The rest is the creative part: figuring out what to display with which user inputs. (Well, there’s also &lt;a href=&#34;https://shiny.rstudio.com/tutorial/written-tutorial/lesson5/&#34;&gt;loading datasets and R scripts&lt;/a&gt; as well as &lt;a href=&#34;https://shiny.rstudio.com/tutorial/written-tutorial/lesson6/&#34;&gt;streamlining bulky apps&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Except, we’re not quite done yet. Copy/pasting code into the R console is &lt;em&gt;not quite&lt;/em&gt; the best way to &lt;a href=&#34;https://shiny.rstudio.com/tutorial/written-tutorial/lesson7/&#34;&gt;showcase your app&lt;/a&gt;. Here’s how to do it properly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Paste all the starter code above into a single file called &lt;code&gt;app.R&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Put that file into a sub-directory of your choice (e.g. &lt;code&gt;./headsortails/&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And call &lt;code&gt;shiny::runApp(&amp;quot;headsortails&amp;quot;)&lt;/code&gt; from an R session running in the parent directory of that subdirectory.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each &lt;code&gt;app.R&lt;/code&gt; should live in its own sub-directory. They are called via the names of their sub-directories. (Note, that the convenience of having both UI and server in the same file was not always possible. Old shiny versions required two separate &lt;code&gt;ui.R&lt;/code&gt; and &lt;code&gt;server.R&lt;/code&gt; files; a structure that’s still supported).&lt;/p&gt;
&lt;p&gt;Finally, shiny apps are ideal to be shared online since they are reactive HTML. You can run your own &lt;a href=&#34;https://github.com/rstudio/shiny-server/blob/master/README.md&#34;&gt;shiny server&lt;/a&gt; to do this, especially if you have many different apps to showcase. For your first steps, I recommend using &lt;a href=&#34;https://www.shinyapps.io&#34;&gt;shinyapps.io&lt;/a&gt;, run by the omipresent Rstudio folks. They have a &lt;a href=&#34;https://www.shinyapps.io/#pricing&#34;&gt;free tier&lt;/a&gt; allowing you to host 5 apps running for a maximum 25 hours per month. That’s plenty of resources to get your feet wet.&lt;/p&gt;
&lt;p&gt;As indicated at the beginning, I’m using shinyapps.io to host the &lt;a href=&#34;https://headsortails.shinyapps.io/headsortails/&#34;&gt;version of the app&lt;/a&gt; that is included above. However, you cannot embed shiny elements directly into a &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;blogdown&lt;/a&gt; post like this one, since those posts are static. Above, I used the &lt;a href=&#34;https://stackoverflow.com/questions/46136141/incorporating-interactive-shiny-apps-into-rmarkdown-document-for-blogdown-hugo-b&#34;&gt;little trick&lt;/a&gt; of embedding the link to my shiny app via the HTML &lt;code&gt;iframe&lt;/code&gt; tag. Like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;iframe src=&amp;quot;https://headsortails.shinyapps.io/headsortails/&amp;quot; width=&amp;quot;800&amp;quot; height=&amp;quot;500&amp;quot; frameborder=&amp;quot;no&amp;quot; scrolling=&amp;quot;no&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;More info:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href=&#34;https://shiny.rstudio.com/tutorial/&#34;&gt;official shiny tutorial&lt;/a&gt;, from which this post was digested, contains a list of &lt;a href=&#34;https://shiny.rstudio.com/tutorial/written-tutorial/lesson1/#Go%20Further&#34;&gt;11 example apps&lt;/a&gt; that demonstrate various use cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check out the pretty comprehensive &lt;a href=&#34;https://shiny.rstudio.com/gallery/&#34;&gt;shiny gallery&lt;/a&gt; for plenty of inspiration. As for many Rstudio/tidyverse tools there’s also a handy &lt;a href=&#34;https://shiny.rstudio.com/articles/cheatsheet.html&#34;&gt;cheat sheet&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re primarily interested in reactive dashboards have a look at &lt;a href=&#34;https://rstudio.github.io/shinydashboard/&#34;&gt;shiny dashboard&lt;/a&gt;. I played with it a bit and I like it so far.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tidyverse evolutions: curly-curly operator and pivoting (feat. tidytuesday data &amp; leaflet visuals)</title>
      <link>https://heads0rtai1s.github.io/2019/11/07/tidy-curly-pivot-leaflet/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heads0rtai1s.github.io/2019/11/07/tidy-curly-pivot-leaflet/</guid>
      <description>
&lt;script src=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/leaflet/leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/leaflet/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/leafletfix/leafletfix.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/Proj4Leaflet/proj4-compressed.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/Proj4Leaflet/proj4leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/rstudio_leaflet/rstudio_leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/leaflet-binding/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/leaflet-providers/leaflet-providers.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/leaflet-providers-plugin/leaflet-providers-plugin.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;The &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt; ecosystem is steadily growing and adapting to the needs of its users. As part of this evolution, existing tools are being replaced by new and better methods. As useful as this flexibility is to the strength of the system, sometimes it can be hard to keep track of all the changes. &lt;strong&gt;This blogpost will deal with two new developments: the ‘curly-curly’ operator for tidy evaluation and the new ‘pivot’ functions for data reshaping.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We will need the following libraries; in particular make sure that you have installed at least &lt;code&gt;tidyr&lt;/code&gt; version 1.0:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;libs &amp;lt;- c(&amp;#39;dplyr&amp;#39;, &amp;#39;tidyr&amp;#39;,          # wrangling
          &amp;#39;readr&amp;#39;, &amp;#39;stringr&amp;#39;,        # wrangling
          &amp;#39;knitr&amp;#39;,&amp;#39;kableExtra&amp;#39;,      # table styling
          &amp;#39;ggplot2&amp;#39;,&amp;#39;gridExtra&amp;#39;,     # plots
          &amp;#39;leaflet&amp;#39;)                 # interactive maps
invisible(lapply(libs, library, character.only = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this post’s dataset we’ll be doing something different than sampling the usual in-built tables. We will work with the &lt;a href=&#34;https://www.nationalgeographic.com/animals/2019/06/squirrel-census-new-york-city-central-park/&#34;&gt;famous&lt;/a&gt; &lt;a href=&#34;https://www.thesquirrelcensus.com&#34;&gt;NYC Squirrel Census&lt;/a&gt; - cataloguing the squirrel population of New York’s Central Park in October 2018. The squirrel census is a great example for a citizen science project that’s both accessible fun and useful scientific contribution.&lt;/p&gt;
&lt;p&gt;Talking about fun community projects: the specific dataset we’re using has been prepared by the &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34;&gt;TidyTuesday project&lt;/a&gt;, a weekly social exercise to test our tidyverse skills and provide inspiration. TidyTuesday is run by the &lt;a href=&#34;https://www.rfordatasci.com&#34;&gt;R for Data Science&lt;/a&gt; Online Learning Community. All datasets are available on github:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;squirrels &amp;lt;- read_csv(str_c(
  &amp;quot;https://raw.githubusercontent.com/&amp;quot;,
  &amp;quot;rfordatascience/tidytuesday/master/&amp;quot;,
  &amp;quot;data/2019/2019-10-29/nyc_squirrels.csv&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;squirrels %&amp;gt;% 
  select(lat, long, date, running, climbing, eating) %&amp;gt;% 
  head(5) %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
lat
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
long
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
running
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
climbing
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
eating
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.79408
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.95613
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10142018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.79485
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.95704
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.76672
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.97683
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10102018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.76970
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.97572
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10182018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.79753
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.95931
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10182018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Among other features, the squirrels data includes the latitude and longitude of the sighting, the date, and flags that indicate whether this squirrel was spotted running, climbing, or eating. True to tidy form, each row corresponds to one squirrel. There are many more features in the full dataset, but we will focus on the ones above in the following examples.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, we will cover tidy evaluation with the &lt;code&gt;{{ }}&lt;/code&gt; operator aka ‘curly-curly’.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Introduced as part of &lt;a href=&#34;https://www.tidyverse.org/articles/2019/06/rlang-0-4-0/&#34;&gt;rlang version 0.4.0&lt;/a&gt; back in June, curly-curly replaces the approach of quoting with &lt;code&gt;enquo&lt;/code&gt; and unquoting with &lt;code&gt;!!&lt;/code&gt; (aka ‘bang-bang’). Instead of two operations it provides a compact shorthand for simple cases. Here is a brief example for counting groups of distinct feature values:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# new style
count_groups &amp;lt;- function(df, groupvar){
  df %&amp;gt;% 
    group_by({{ groupvar }}) %&amp;gt;% 
    count()
}

count_groups(squirrels, climbing) %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
climbing
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2365
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
658
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this example, &lt;code&gt;{{ groupvar }}&lt;/code&gt; splices the value of &lt;code&gt;groupvar&lt;/code&gt; into the &lt;code&gt;group_by&lt;/code&gt; call, rather than its name. This is equivalent to the quote-unquote style of &lt;code&gt;!! enquo(groupvar)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# old style
count_groups_old &amp;lt;- function(df, groupvar){
  df %&amp;gt;% 
    group_by(!! enquo(groupvar)) %&amp;gt;% 
    count()
}

count_groups_old(squirrels, climbing) %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
climbing
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2365
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
658
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The advantage of &lt;code&gt;{{ }}&lt;/code&gt; lies in its relative cognitive ease: think of it as inserting the value of the variable into the expression. No intermediate quoting or unquoting needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next, we will look at how to reshape data with the &lt;a href=&#34;https://tidyr.tidyverse.org/articles/pivot.html&#34;&gt;new functions&lt;/a&gt; &lt;code&gt;pivot_wider&lt;/code&gt; and &lt;code&gt;pivot_longer&lt;/code&gt;&lt;/strong&gt;, which are replacing the previous &lt;code&gt;spread&lt;/code&gt; and &lt;code&gt;gather&lt;/code&gt; tools. Most importantly: &lt;code&gt;pivot_wider&lt;/code&gt; is the inverse function to &lt;code&gt;pivot_longer&lt;/code&gt;, and vice versa.&lt;/p&gt;
&lt;p&gt;As the name suggests, &lt;code&gt;pivot_wider&lt;/code&gt; makes a tibble wider by turning a single categorical column into multiple columns, one for each category.&lt;/p&gt;
&lt;p&gt;Let’s look at this aggregated data frame of sightings of climbing squirrels per day:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;squirrels %&amp;gt;% 
  count(date, climbing) %&amp;gt;% 
  head(4) %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
climbing
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
253
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
84
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
283
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
122
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Pivoting to a wider format allows us to compare the numbers of climbing and non-climbing squirrels directly next to each other:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# new style with pivot_wider
squirrels %&amp;gt;% 
  count(date, climbing) %&amp;gt;% 
  pivot_wider(names_from = climbing, values_from = n, names_prefix = &amp;quot;climbing_&amp;quot;) %&amp;gt;% 
  head(2) %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_FALSE
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_TRUE
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
253
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
84
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
283
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
122
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;names_from&lt;/code&gt; argument indicates which column supplies the new column names. The values of this column are being picked from the feature defined via the &lt;code&gt;values_from&lt;/code&gt; keyword. Here, we pick the names from the binary feature &lt;code&gt;climbing&lt;/code&gt; and the values from the count column &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Among the additional keywords, &lt;code&gt;names_prefix&lt;/code&gt; allows us to assign meaningful names to the new columns (which would otherwise simply be the rather generic ‘FALSE’ and ‘TRUE’ here). Another useful keyword is &lt;code&gt;values_fill&lt;/code&gt;, which specifies a global replacement for any missing values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The new &lt;code&gt;pivot_wider&lt;/code&gt; replaces the old &lt;code&gt;spread&lt;/code&gt; function, which had comparable yet possibly more confusing parameters. For comparison, here is the same result with &lt;code&gt;spread&lt;/code&gt;:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# old style with spread
squirrels %&amp;gt;% 
  count(date, climbing) %&amp;gt;% 
  spread(key = climbing, value = n) %&amp;gt;% 
  head(2) %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
FALSE
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
TRUE
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
253
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
84
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
283
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
122
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The syntax is very similar, which should make it easy for those familiar with &lt;code&gt;spread&lt;/code&gt; to switch to &lt;code&gt;pivot_wider&lt;/code&gt;. Note, that &lt;code&gt;spread&lt;/code&gt; had no &lt;code&gt;names_prefix&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;In most tutorials, &lt;code&gt;pivot_wider&lt;/code&gt; is somewhat overshadowed by &lt;code&gt;pivot_longer&lt;/code&gt;; but I use it frequently to quickly compute proportions for grouped columns. For instance, here are the top 3 days for spotting squirrels climbing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;squirrels %&amp;gt;% 
  count(date, climbing) %&amp;gt;% 
  pivot_wider(names_from = climbing, values_from = n, names_prefix = &amp;quot;climbing_&amp;quot;) %&amp;gt;%
  mutate(climbing_percentage = climbing_TRUE/(climbing_TRUE + climbing_FALSE)*100) %&amp;gt;% 
  arrange(desc(climbing_percentage)) %&amp;gt;% 
  head(3) %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_FALSE
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_TRUE
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_percentage
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
283
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
122
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.12346
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
253
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
84
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.92582
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10082018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
220
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.80702
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Let’s move on to &lt;code&gt;pivot_longer&lt;/code&gt;&lt;/strong&gt;. Being the inverse function to &lt;code&gt;pivot_wider&lt;/code&gt;, this tool (often) reduces the number of columns by turning some of the columns into a single new (typically) categorical feature alongside an (often times) numerical feature. The different levels of the categorical column now describe the numerical column in a unique way (similarly to the wider column structure previously). This is all a bit abstract, so let’s do a quick example:&lt;/p&gt;
&lt;p&gt;Imagine we’ve extracted both the proportion of climbing squirrels and non-climbing squirrels for each day with the help of &lt;code&gt;pivot_wider&lt;/code&gt;. (Of course, one number determines the other but let’s use it as a simple illustration).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;squirrels %&amp;gt;% 
  count(date, climbing) %&amp;gt;% 
  pivot_wider(names_from = climbing, values_from = n, names_prefix = &amp;quot;climbing_&amp;quot;) %&amp;gt;%
  mutate(prop_true = climbing_TRUE/(climbing_TRUE + climbing_FALSE)*100,
         prop_false = climbing_FALSE/(climbing_TRUE + climbing_FALSE)*100) %&amp;gt;% 
  head(2) %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_FALSE
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_TRUE
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
prop_true
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
prop_false
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
253
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
84
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.92582
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
75.07418
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
283
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
122
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.12346
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
69.87654
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now we will use &lt;code&gt;pivot_longer&lt;/code&gt; to turn those two &lt;code&gt;prop_&lt;/code&gt; columns into a categorical &lt;code&gt;climbing&lt;/code&gt; and a numerical &lt;code&gt;percentage&lt;/code&gt; feature. Here, we drop the &lt;code&gt;climbing_FALSE&lt;/code&gt; and &lt;code&gt;climbing_TRUE&lt;/code&gt; columns, so the pivoting doesn’t change the number of columns but it changes the structure of the dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;squirrels %&amp;gt;% 
  count(date, climbing) %&amp;gt;% 
  pivot_wider(names_from = climbing, values_from = n, names_prefix = &amp;quot;climbing_&amp;quot;) %&amp;gt;%
  mutate(prop_true = climbing_TRUE/(climbing_TRUE + climbing_FALSE),
         prop_false = climbing_FALSE/(climbing_TRUE + climbing_FALSE)) %&amp;gt;%
  select(date, prop_true, prop_false) %&amp;gt;% 
  pivot_longer(cols = c(&amp;quot;prop_true&amp;quot;, &amp;quot;prop_false&amp;quot;),
               names_to = &amp;quot;climbing&amp;quot;, values_to = &amp;quot;percentage&amp;quot;) %&amp;gt;% 
  head(4)  %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
climbing
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
percentage
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
prop_true
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.2492582
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
prop_false
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.7507418
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
prop_true
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.3012346
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
prop_false
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.6987654
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;cols&lt;/code&gt; argument specifies the columns that will be pivoted. Then, &lt;code&gt;names_to&lt;/code&gt; gives the name of the new feature that will hold the (categorical) names of the original columns. And &lt;code&gt;values_to&lt;/code&gt; is the new feature that hold their values (here the percentages).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note, that as with the older &lt;code&gt;gather&lt;/code&gt; method, the new column names have to be passed as strings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The resulting data structure is often much better suited for plotting with &lt;code&gt;ggplot2&lt;/code&gt;. The categorical feature can directly become a colour, fill, or faceting variable.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Finally, let’s combine curly-curly and pivoting into a comprehensive example.&lt;/strong&gt; Here, we build a function that takes as arguments the name of a data frame and the name of a logical column, here a squirrel action, and then extracts the percentage of this action per coordinate bin. This is it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;extract_percentage &amp;lt;- function(df, col) {
  
  df %&amp;gt;% 
    mutate(lat = round(lat*5, 2)/5,
         long = round(long*5, 2)/5) %&amp;gt;% 
    count(lat, long, {{ col }}) %&amp;gt;% 
    pivot_wider(names_from = {{ col }}, values_from = n,
                values_fill = list(n = 0)) %&amp;gt;%
    mutate(true = `TRUE`/(`TRUE` + `FALSE`)*100,
           false = `FALSE`/(`TRUE` + `FALSE`)*100) %&amp;gt;%
    select(lat, long, true, false) %&amp;gt;% 
    pivot_longer(cols = c(&amp;quot;true&amp;quot;, &amp;quot;false&amp;quot;),
                 names_to = &amp;quot;action&amp;quot;, values_to = &amp;quot;percentage&amp;quot;) %&amp;gt;% 
    filter(action == &amp;quot;true&amp;quot;)
}

extract_percentage(squirrels, climbing) %&amp;gt;% 
  head(3)  %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
lat
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
long
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
action
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
percentage
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.764
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.974
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
true
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.00000
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.766
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.978
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
true
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.73913
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.766
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.976
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
true
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.23077
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The coordinates are rounded the nearest 0.02 degrees to provide the sample size for summary statistics.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We only keep the percentage of positive sightings for each action.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’re now using this function to extract the proportions of squirrels that were observed eating, climbing, or running. Then we visualise those proportions on an interactive map of Manhattan centred on Central Park. The map is constructed using the wonderful &lt;a href=&#34;https://rstudio.github.io/leaflet/&#34;&gt;leaflet&lt;/a&gt; package. Such a map could be used to find locations in the park that might be more promising than others for spotting certain squirrel shenanigans.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;loc &amp;lt;- extract_percentage(squirrels, eating)

pal &amp;lt;- colorNumeric(palette = &amp;quot;RdBu&amp;quot;, domain = seq(0,100), reverse = TRUE)

leaflet(loc) %&amp;gt;%
  setView(lng = median(loc$long), lat = median(loc$lat), zoom = 13) %&amp;gt;% 
  #addProviderTiles(&amp;quot;Esri.NatGeoWorldMap&amp;quot;) %&amp;gt;%
  addProviderTiles(providers$CartoDB.DarkMatter) %&amp;gt;%
  addCircleMarkers(~ long, ~ lat,
                   data = extract_percentage(squirrels, eating),
                   group = &amp;quot;Eating&amp;quot;,
                   color = ~ pal(percentage),
                   radius = 6, fillOpacity = 0.7, stroke = FALSE) %&amp;gt;% 
  addCircleMarkers(~ long, ~ lat,
                   data = extract_percentage(squirrels, climbing),
                   group = &amp;quot;Climbing&amp;quot;,
                   color = ~ pal(percentage),
                   radius = 6, fillOpacity = 0.7, stroke = FALSE) %&amp;gt;%
  addCircleMarkers(~ long, ~ lat,
                   data = extract_percentage(squirrels, running),
                   group = &amp;quot;Running&amp;quot;,
                   color = ~ pal(percentage),
                   radius = 6, fillOpacity = 0.7, stroke = FALSE) %&amp;gt;%
  addLayersControl(baseGroups = c(&amp;quot;Eating&amp;quot;, &amp;quot;Climbing&amp;quot;, &amp;quot;Running&amp;quot;),
                   options = layersControlOptions(collapsed = FALSE)) %&amp;gt;%
  addLegend(&amp;quot;bottomright&amp;quot;, pal = pal, values = ~ percentage,
            title = &amp;quot;Percentage&amp;quot;, labFormat = labelFormat(suffix = &amp;quot;%&amp;quot;),) %&amp;gt;% 
  addScaleBar(&amp;quot;bottomleft&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;setView&#34;:[[40.782,-73.966],13,[]],&#34;calls&#34;:[{&#34;method&#34;:&#34;addProviderTiles&#34;,&#34;args&#34;:[&#34;CartoDB.DarkMatter&#34;,null,null,{&#34;errorTileUrl&#34;:&#34;&#34;,&#34;noWrap&#34;:false,&#34;detectRetina&#34;:false}]},{&#34;method&#34;:&#34;addCircleMarkers&#34;,&#34;args&#34;:[[40.764,40.766,40.766,40.766,40.766,40.768,40.768,40.768,40.768,40.768,40.768,40.768,40.77,40.77,40.77,40.77,40.77,40.77,40.77,40.772,40.772,40.772,40.772,40.772,40.772,40.772,40.774,40.774,40.774,40.774,40.774,40.774,40.774,40.776,40.776,40.776,40.776,40.776,40.776,40.776,40.778,40.778,40.778,40.778,40.778,40.778,40.78,40.78,40.78,40.78,40.78,40.78,40.78,40.782,40.782,40.782,40.782,40.782,40.782,40.782,40.784,40.784,40.784,40.784,40.784,40.784,40.786,40.786,40.786,40.788,40.788,40.788,40.788,40.788,40.788,40.788,40.79,40.79,40.79,40.79,40.79,40.79,40.79,40.792,40.792,40.792,40.792,40.792,40.792,40.792,40.794,40.794,40.794,40.794,40.794,40.794,40.794,40.794,40.796,40.796,40.796,40.796,40.796,40.796,40.796,40.798,40.798,40.798,40.798,40.798,40.798,40.8,40.8],[-73.974,-73.978,-73.976,-73.974,-73.972,-73.982,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.966,-73.976,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.962,-73.972,-73.97,-73.968,-73.966,-73.964,-73.962,-73.96,-73.97,-73.968,-73.966,-73.964,-73.96,-73.958,-73.97,-73.968,-73.958,-73.968,-73.966,-73.964,-73.962,-73.96,-73.958,-73.956,-73.966,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.958,-73.956],6,null,&#34;Eating&#34;,{&#34;interactive&#34;:true,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:false,&#34;color&#34;:[&#34;#053061&#34;,&#34;#2D73B3&#34;,&#34;#E9F0F4&#34;,&#34;#8FC3DD&#34;,&#34;#4996C5&#34;,&#34;#3984BB&#34;,&#34;#94C6DF&#34;,&#34;#3780BA&#34;,&#34;#3C87BD&#34;,&#34;#96C7DF&#34;,&#34;#97C7DF&#34;,&#34;#A8D0E4&#34;,&#34;#408DC0&#34;,&#34;#C9E1EE&#34;,&#34;#75B0D3&#34;,&#34;#62A4CD&#34;,&#34;#6EACD1&#34;,&#34;#7BB4D5&#34;,&#34;#053061&#34;,&#34;#F8B799&#34;,&#34;#3279B6&#34;,&#34;#408DC0&#34;,&#34;#CAE1EE&#34;,&#34;#88BEDA&#34;,&#34;#6EACD1&#34;,&#34;#3D89BE&#34;,&#34;#A8D0E4&#34;,&#34;#73AFD2&#34;,&#34;#E0ECF3&#34;,&#34;#C0DCEB&#34;,&#34;#90C4DD&#34;,&#34;#4190C2&#34;,&#34;#6EACD1&#34;,&#34;#FAECE4&#34;,&#34;#3781BA&#34;,&#34;#529BC7&#34;,&#34;#E1ECF3&#34;,&#34;#61A4CC&#34;,&#34;#B7D7E8&#34;,&#34;#053061&#34;,&#34;#286DB0&#34;,&#34;#88BEDA&#34;,&#34;#96C7DF&#34;,&#34;#5EA1CB&#34;,&#34;#6EACD1&#34;,&#34;#88BEDA&#34;,&#34;#053061&#34;,&#34;#3E8BBF&#34;,&#34;#A8D0E4&#34;,&#34;#3279B6&#34;,&#34;#C9E1EE&#34;,&#34;#EFF3F5&#34;,&#34;#053061&#34;,&#34;#F7F7F7&#34;,&#34;#519AC7&#34;,&#34;#4996C5&#34;,&#34;#8EC2DC&#34;,&#34;#94C6DE&#34;,&#34;#357EB8&#34;,&#34;#4393C3&#34;,&#34;#76B1D3&#34;,&#34;#347CB8&#34;,&#34;#408FC1&#34;,&#34;#053061&#34;,&#34;#7AB4D5&#34;,&#34;#053061&#34;,&#34;#67001F&#34;,&#34;#357EB8&#34;,&#34;#3E8BBF&#34;,&#34;#053061&#34;,&#34;#7FB7D7&#34;,&#34;#3279B6&#34;,&#34;#4393C3&#34;,&#34;#053061&#34;,&#34;#1E61A5&#34;,&#34;#154F8C&#34;,&#34;#6EACD1&#34;,&#34;#E7EFF4&#34;,&#34;#7FB7D7&#34;,&#34;#A3CDE3&#34;,&#34;#6EACD1&#34;,&#34;#17518F&#34;,&#34;#1E61A5&#34;,&#34;#B9D8E9&#34;,&#34;#3D89BE&#34;,&#34;#94C6DF&#34;,&#34;#8FC3DD&#34;,&#34;#1E61A5&#34;,&#34;#3E8BBF&#34;,&#34;#B7D7E8&#34;,&#34;#053061&#34;,&#34;#64A6CD&#34;,&#34;#357DB8&#34;,&#34;#529BC7&#34;,&#34;#A8D0E4&#34;,&#34;#418FC1&#34;,&#34;#BEDBEA&#34;,&#34;#67001F&#34;,&#34;#3E8BBF&#34;,&#34;#5DA1CB&#34;,&#34;#8DC1DC&#34;,&#34;#134A86&#34;,&#34;#4A96C5&#34;,&#34;#C2DDEC&#34;,&#34;#3984BB&#34;,&#34;#579EC9&#34;,&#34;#4291C2&#34;,&#34;#3178B5&#34;,&#34;#3B86BD&#34;,&#34;#1E61A5&#34;,&#34;#3279B6&#34;,&#34;#286DB0&#34;,&#34;#3E8BBF&#34;],&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:[&#34;#053061&#34;,&#34;#2D73B3&#34;,&#34;#E9F0F4&#34;,&#34;#8FC3DD&#34;,&#34;#4996C5&#34;,&#34;#3984BB&#34;,&#34;#94C6DF&#34;,&#34;#3780BA&#34;,&#34;#3C87BD&#34;,&#34;#96C7DF&#34;,&#34;#97C7DF&#34;,&#34;#A8D0E4&#34;,&#34;#408DC0&#34;,&#34;#C9E1EE&#34;,&#34;#75B0D3&#34;,&#34;#62A4CD&#34;,&#34;#6EACD1&#34;,&#34;#7BB4D5&#34;,&#34;#053061&#34;,&#34;#F8B799&#34;,&#34;#3279B6&#34;,&#34;#408DC0&#34;,&#34;#CAE1EE&#34;,&#34;#88BEDA&#34;,&#34;#6EACD1&#34;,&#34;#3D89BE&#34;,&#34;#A8D0E4&#34;,&#34;#73AFD2&#34;,&#34;#E0ECF3&#34;,&#34;#C0DCEB&#34;,&#34;#90C4DD&#34;,&#34;#4190C2&#34;,&#34;#6EACD1&#34;,&#34;#FAECE4&#34;,&#34;#3781BA&#34;,&#34;#529BC7&#34;,&#34;#E1ECF3&#34;,&#34;#61A4CC&#34;,&#34;#B7D7E8&#34;,&#34;#053061&#34;,&#34;#286DB0&#34;,&#34;#88BEDA&#34;,&#34;#96C7DF&#34;,&#34;#5EA1CB&#34;,&#34;#6EACD1&#34;,&#34;#88BEDA&#34;,&#34;#053061&#34;,&#34;#3E8BBF&#34;,&#34;#A8D0E4&#34;,&#34;#3279B6&#34;,&#34;#C9E1EE&#34;,&#34;#EFF3F5&#34;,&#34;#053061&#34;,&#34;#F7F7F7&#34;,&#34;#519AC7&#34;,&#34;#4996C5&#34;,&#34;#8EC2DC&#34;,&#34;#94C6DE&#34;,&#34;#357EB8&#34;,&#34;#4393C3&#34;,&#34;#76B1D3&#34;,&#34;#347CB8&#34;,&#34;#408FC1&#34;,&#34;#053061&#34;,&#34;#7AB4D5&#34;,&#34;#053061&#34;,&#34;#67001F&#34;,&#34;#357EB8&#34;,&#34;#3E8BBF&#34;,&#34;#053061&#34;,&#34;#7FB7D7&#34;,&#34;#3279B6&#34;,&#34;#4393C3&#34;,&#34;#053061&#34;,&#34;#1E61A5&#34;,&#34;#154F8C&#34;,&#34;#6EACD1&#34;,&#34;#E7EFF4&#34;,&#34;#7FB7D7&#34;,&#34;#A3CDE3&#34;,&#34;#6EACD1&#34;,&#34;#17518F&#34;,&#34;#1E61A5&#34;,&#34;#B9D8E9&#34;,&#34;#3D89BE&#34;,&#34;#94C6DF&#34;,&#34;#8FC3DD&#34;,&#34;#1E61A5&#34;,&#34;#3E8BBF&#34;,&#34;#B7D7E8&#34;,&#34;#053061&#34;,&#34;#64A6CD&#34;,&#34;#357DB8&#34;,&#34;#529BC7&#34;,&#34;#A8D0E4&#34;,&#34;#418FC1&#34;,&#34;#BEDBEA&#34;,&#34;#67001F&#34;,&#34;#3E8BBF&#34;,&#34;#5DA1CB&#34;,&#34;#8DC1DC&#34;,&#34;#134A86&#34;,&#34;#4A96C5&#34;,&#34;#C2DDEC&#34;,&#34;#3984BB&#34;,&#34;#579EC9&#34;,&#34;#4291C2&#34;,&#34;#3178B5&#34;,&#34;#3B86BD&#34;,&#34;#1E61A5&#34;,&#34;#3279B6&#34;,&#34;#286DB0&#34;,&#34;#3E8BBF&#34;],&#34;fillOpacity&#34;:0.7},null,null,null,null,null,{&#34;interactive&#34;:false,&#34;permanent&#34;:false,&#34;direction&#34;:&#34;auto&#34;,&#34;opacity&#34;:1,&#34;offset&#34;:[0,0],&#34;textsize&#34;:&#34;10px&#34;,&#34;textOnly&#34;:false,&#34;className&#34;:&#34;&#34;,&#34;sticky&#34;:true},null]},{&#34;method&#34;:&#34;addCircleMarkers&#34;,&#34;args&#34;:[[40.764,40.766,40.766,40.766,40.766,40.768,40.768,40.768,40.768,40.768,40.768,40.768,40.77,40.77,40.77,40.77,40.77,40.77,40.77,40.772,40.772,40.772,40.772,40.772,40.772,40.772,40.774,40.774,40.774,40.774,40.774,40.774,40.774,40.776,40.776,40.776,40.776,40.776,40.776,40.776,40.778,40.778,40.778,40.778,40.778,40.778,40.78,40.78,40.78,40.78,40.78,40.78,40.78,40.782,40.782,40.782,40.782,40.782,40.782,40.782,40.784,40.784,40.784,40.784,40.784,40.784,40.786,40.786,40.786,40.788,40.788,40.788,40.788,40.788,40.788,40.788,40.79,40.79,40.79,40.79,40.79,40.79,40.79,40.792,40.792,40.792,40.792,40.792,40.792,40.792,40.794,40.794,40.794,40.794,40.794,40.794,40.794,40.794,40.796,40.796,40.796,40.796,40.796,40.796,40.796,40.798,40.798,40.798,40.798,40.798,40.798,40.8,40.8],[-73.974,-73.978,-73.976,-73.974,-73.972,-73.982,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.966,-73.976,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.962,-73.972,-73.97,-73.968,-73.966,-73.964,-73.962,-73.96,-73.97,-73.968,-73.966,-73.964,-73.96,-73.958,-73.97,-73.968,-73.958,-73.968,-73.966,-73.964,-73.962,-73.96,-73.958,-73.956,-73.966,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.958,-73.956],6,null,&#34;Climbing&#34;,{&#34;interactive&#34;:true,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:false,&#34;color&#34;:[&#34;#F7F7F7&#34;,&#34;#539BC8&#34;,&#34;#418FC1&#34;,&#34;#3F8CC0&#34;,&#34;#4996C5&#34;,&#34;#3984BB&#34;,&#34;#337AB7&#34;,&#34;#3780BA&#34;,&#34;#71AED2&#34;,&#34;#579EC9&#34;,&#34;#357EB8&#34;,&#34;#3984BB&#34;,&#34;#408DC0&#34;,&#34;#74B0D3&#34;,&#34;#579EC9&#34;,&#34;#154F8C&#34;,&#34;#2B71B2&#34;,&#34;#2C72B2&#34;,&#34;#DCEAF2&#34;,&#34;#F8B799&#34;,&#34;#D1E5F0&#34;,&#34;#6EACD1&#34;,&#34;#3077B5&#34;,&#34;#519AC7&#34;,&#34;#4E99C6&#34;,&#34;#A0CCE2&#34;,&#34;#E2EDF3&#34;,&#34;#68A8CF&#34;,&#34;#84BBD9&#34;,&#34;#4393C3&#34;,&#34;#3882BA&#34;,&#34;#2D73B3&#34;,&#34;#E68367&#34;,&#34;#1B599A&#34;,&#34;#84BBD9&#34;,&#34;#8EC2DC&#34;,&#34;#195696&#34;,&#34;#72AED2&#34;,&#34;#64A6CD&#34;,&#34;#DCEAF2&#34;,&#34;#7CB5D6&#34;,&#34;#3279B6&#34;,&#34;#4190C2&#34;,&#34;#5EA1CB&#34;,&#34;#F7F7F7&#34;,&#34;#DCEAF2&#34;,&#34;#A8D0E4&#34;,&#34;#5CA0CA&#34;,&#34;#4B97C5&#34;,&#34;#195696&#34;,&#34;#B5D6E8&#34;,&#34;#B1D4E7&#34;,&#34;#053061&#34;,&#34;#E68367&#34;,&#34;#053061&#34;,&#34;#A1CCE2&#34;,&#34;#62A4CD&#34;,&#34;#4C98C6&#34;,&#34;#97C7DF&#34;,&#34;#D1E5F0&#34;,&#34;#76B1D3&#34;,&#34;#2B71B2&#34;,&#34;#C5DFED&#34;,&#34;#A8D0E4&#34;,&#34;#A8D0E4&#34;,&#34;#F7F7F7&#34;,&#34;#053061&#34;,&#34;#5FA2CB&#34;,&#34;#7FB7D7&#34;,&#34;#2B71B2&#34;,&#34;#BBD9E9&#34;,&#34;#3279B6&#34;,&#34;#7AB4D5&#34;,&#34;#A8D0E4&#34;,&#34;#FAEAE1&#34;,&#34;#D6E7F1&#34;,&#34;#3984BB&#34;,&#34;#9BCAE1&#34;,&#34;#3E8BBF&#34;,&#34;#65A6CE&#34;,&#34;#6EACD1&#34;,&#34;#F7F7F7&#34;,&#34;#7FB7D7&#34;,&#34;#1C5D9F&#34;,&#34;#6EACD1&#34;,&#34;#7FB7D7&#34;,&#34;#3F8CC0&#34;,&#34;#BBD9E9&#34;,&#34;#5CA0CA&#34;,&#34;#3279B6&#34;,&#34;#053061&#34;,&#34;#77B2D4&#34;,&#34;#68A8CE&#34;,&#34;#408EC1&#34;,&#34;#2A6FB1&#34;,&#34;#2C72B2&#34;,&#34;#3780B9&#34;,&#34;#053061&#34;,&#34;#053061&#34;,&#34;#1D5EA1&#34;,&#34;#4291C2&#34;,&#34;#347CB8&#34;,&#34;#4A96C5&#34;,&#34;#2B71B2&#34;,&#34;#053061&#34;,&#34;#579EC9&#34;,&#34;#65A6CE&#34;,&#34;#3178B5&#34;,&#34;#3B86BD&#34;,&#34;#3E8BBF&#34;,&#34;#3279B6&#34;,&#34;#E9F0F4&#34;,&#34;#7FB7D7&#34;],&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:[&#34;#F7F7F7&#34;,&#34;#539BC8&#34;,&#34;#418FC1&#34;,&#34;#3F8CC0&#34;,&#34;#4996C5&#34;,&#34;#3984BB&#34;,&#34;#337AB7&#34;,&#34;#3780BA&#34;,&#34;#71AED2&#34;,&#34;#579EC9&#34;,&#34;#357EB8&#34;,&#34;#3984BB&#34;,&#34;#408DC0&#34;,&#34;#74B0D3&#34;,&#34;#579EC9&#34;,&#34;#154F8C&#34;,&#34;#2B71B2&#34;,&#34;#2C72B2&#34;,&#34;#DCEAF2&#34;,&#34;#F8B799&#34;,&#34;#D1E5F0&#34;,&#34;#6EACD1&#34;,&#34;#3077B5&#34;,&#34;#519AC7&#34;,&#34;#4E99C6&#34;,&#34;#A0CCE2&#34;,&#34;#E2EDF3&#34;,&#34;#68A8CF&#34;,&#34;#84BBD9&#34;,&#34;#4393C3&#34;,&#34;#3882BA&#34;,&#34;#2D73B3&#34;,&#34;#E68367&#34;,&#34;#1B599A&#34;,&#34;#84BBD9&#34;,&#34;#8EC2DC&#34;,&#34;#195696&#34;,&#34;#72AED2&#34;,&#34;#64A6CD&#34;,&#34;#DCEAF2&#34;,&#34;#7CB5D6&#34;,&#34;#3279B6&#34;,&#34;#4190C2&#34;,&#34;#5EA1CB&#34;,&#34;#F7F7F7&#34;,&#34;#DCEAF2&#34;,&#34;#A8D0E4&#34;,&#34;#5CA0CA&#34;,&#34;#4B97C5&#34;,&#34;#195696&#34;,&#34;#B5D6E8&#34;,&#34;#B1D4E7&#34;,&#34;#053061&#34;,&#34;#E68367&#34;,&#34;#053061&#34;,&#34;#A1CCE2&#34;,&#34;#62A4CD&#34;,&#34;#4C98C6&#34;,&#34;#97C7DF&#34;,&#34;#D1E5F0&#34;,&#34;#76B1D3&#34;,&#34;#2B71B2&#34;,&#34;#C5DFED&#34;,&#34;#A8D0E4&#34;,&#34;#A8D0E4&#34;,&#34;#F7F7F7&#34;,&#34;#053061&#34;,&#34;#5FA2CB&#34;,&#34;#7FB7D7&#34;,&#34;#2B71B2&#34;,&#34;#BBD9E9&#34;,&#34;#3279B6&#34;,&#34;#7AB4D5&#34;,&#34;#A8D0E4&#34;,&#34;#FAEAE1&#34;,&#34;#D6E7F1&#34;,&#34;#3984BB&#34;,&#34;#9BCAE1&#34;,&#34;#3E8BBF&#34;,&#34;#65A6CE&#34;,&#34;#6EACD1&#34;,&#34;#F7F7F7&#34;,&#34;#7FB7D7&#34;,&#34;#1C5D9F&#34;,&#34;#6EACD1&#34;,&#34;#7FB7D7&#34;,&#34;#3F8CC0&#34;,&#34;#BBD9E9&#34;,&#34;#5CA0CA&#34;,&#34;#3279B6&#34;,&#34;#053061&#34;,&#34;#77B2D4&#34;,&#34;#68A8CE&#34;,&#34;#408EC1&#34;,&#34;#2A6FB1&#34;,&#34;#2C72B2&#34;,&#34;#3780B9&#34;,&#34;#053061&#34;,&#34;#053061&#34;,&#34;#1D5EA1&#34;,&#34;#4291C2&#34;,&#34;#347CB8&#34;,&#34;#4A96C5&#34;,&#34;#2B71B2&#34;,&#34;#053061&#34;,&#34;#579EC9&#34;,&#34;#65A6CE&#34;,&#34;#3178B5&#34;,&#34;#3B86BD&#34;,&#34;#3E8BBF&#34;,&#34;#3279B6&#34;,&#34;#E9F0F4&#34;,&#34;#7FB7D7&#34;],&#34;fillOpacity&#34;:0.7},null,null,null,null,null,{&#34;interactive&#34;:false,&#34;permanent&#34;:false,&#34;direction&#34;:&#34;auto&#34;,&#34;opacity&#34;:1,&#34;offset&#34;:[0,0],&#34;textsize&#34;:&#34;10px&#34;,&#34;textOnly&#34;:false,&#34;className&#34;:&#34;&#34;,&#34;sticky&#34;:true},null]},{&#34;method&#34;:&#34;addCircleMarkers&#34;,&#34;args&#34;:[[40.764,40.766,40.766,40.766,40.766,40.768,40.768,40.768,40.768,40.768,40.768,40.768,40.77,40.77,40.77,40.77,40.77,40.77,40.77,40.772,40.772,40.772,40.772,40.772,40.772,40.772,40.774,40.774,40.774,40.774,40.774,40.774,40.774,40.776,40.776,40.776,40.776,40.776,40.776,40.776,40.778,40.778,40.778,40.778,40.778,40.778,40.78,40.78,40.78,40.78,40.78,40.78,40.78,40.782,40.782,40.782,40.782,40.782,40.782,40.782,40.784,40.784,40.784,40.784,40.784,40.784,40.786,40.786,40.786,40.788,40.788,40.788,40.788,40.788,40.788,40.788,40.79,40.79,40.79,40.79,40.79,40.79,40.79,40.792,40.792,40.792,40.792,40.792,40.792,40.792,40.794,40.794,40.794,40.794,40.794,40.794,40.794,40.794,40.796,40.796,40.796,40.796,40.796,40.796,40.796,40.798,40.798,40.798,40.798,40.798,40.798,40.8,40.8],[-73.974,-73.978,-73.976,-73.974,-73.972,-73.982,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.966,-73.976,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.962,-73.972,-73.97,-73.968,-73.966,-73.964,-73.962,-73.96,-73.97,-73.968,-73.966,-73.964,-73.96,-73.958,-73.97,-73.968,-73.958,-73.968,-73.966,-73.964,-73.962,-73.96,-73.958,-73.956,-73.966,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.958,-73.956],6,null,&#34;Running&#34;,{&#34;interactive&#34;:true,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:false,&#34;color&#34;:[&#34;#F7F7F7&#34;,&#34;#2D73B3&#34;,&#34;#5FA2CB&#34;,&#34;#3F8CC0&#34;,&#34;#79B3D4&#34;,&#34;#A8D0E4&#34;,&#34;#3D8ABE&#34;,&#34;#ACD2E5&#34;,&#34;#64A6CD&#34;,&#34;#3077B5&#34;,&#34;#C8E0ED&#34;,&#34;#D7E8F1&#34;,&#34;#367FB9&#34;,&#34;#B5D6E8&#34;,&#34;#3F8CC0&#34;,&#34;#79B3D4&#34;,&#34;#8CC1DC&#34;,&#34;#4E98C6&#34;,&#34;#88BEDA&#34;,&#34;#053061&#34;,&#34;#4393C3&#34;,&#34;#85BBD9&#34;,&#34;#6EACD1&#34;,&#34;#296EB0&#34;,&#34;#3B87BD&#34;,&#34;#88BEDA&#34;,&#34;#F8B799&#34;,&#34;#73AFD2&#34;,&#34;#296FB1&#34;,&#34;#4393C3&#34;,&#34;#408EC1&#34;,&#34;#2064A9&#34;,&#34;#F7F7F7&#34;,&#34;#C8E0ED&#34;,&#34;#66A7CE&#34;,&#34;#529BC7&#34;,&#34;#3984BB&#34;,&#34;#ACD2E5&#34;,&#34;#A8D0E4&#34;,&#34;#3279B6&#34;,&#34;#357EB8&#34;,&#34;#519AC7&#34;,&#34;#4190C2&#34;,&#34;#77B2D4&#34;,&#34;#F7F7F7&#34;,&#34;#408FC1&#34;,&#34;#053061&#34;,&#34;#3E8BBF&#34;,&#34;#6EACD1&#34;,&#34;#B7D7E8&#34;,&#34;#4190C2&#34;,&#34;#539BC8&#34;,&#34;#053061&#34;,&#34;#6EACD1&#34;,&#34;#3D89BE&#34;,&#34;#C6DFED&#34;,&#34;#154F8C&#34;,&#34;#3F8DC0&#34;,&#34;#5FA2CB&#34;,&#34;#D1E5F0&#34;,&#34;#2D73B3&#34;,&#34;#6EACD1&#34;,&#34;#408FC1&#34;,&#34;#A8D0E4&#34;,&#34;#2E75B4&#34;,&#34;#053061&#34;,&#34;#053061&#34;,&#34;#E9F0F4&#34;,&#34;#BBD9E9&#34;,&#34;#053061&#34;,&#34;#7FB7D7&#34;,&#34;#DCEAF2&#34;,&#34;#2E75B4&#34;,&#34;#053061&#34;,&#34;#3E8BBF&#34;,&#34;#3C88BE&#34;,&#34;#6EACD1&#34;,&#34;#88BEDA&#34;,&#34;#7FB7D7&#34;,&#34;#2D73B3&#34;,&#34;#88BEDA&#34;,&#34;#17518F&#34;,&#34;#5CA0CA&#34;,&#34;#4190C2&#34;,&#34;#519AC7&#34;,&#34;#68A8CE&#34;,&#34;#3F8CC0&#34;,&#34;#BBD9E9&#34;,&#34;#5CA0CA&#34;,&#34;#519AC7&#34;,&#34;#053061&#34;,&#34;#DCEAF2&#34;,&#34;#68A8CE&#34;,&#34;#2F76B4&#34;,&#34;#68A8CE&#34;,&#34;#4F99C6&#34;,&#34;#2368AD&#34;,&#34;#053061&#34;,&#34;#BBD9E9&#34;,&#34;#C0DCEB&#34;,&#34;#9DCAE1&#34;,&#34;#6EACD1&#34;,&#34;#E4EEF3&#34;,&#34;#C2DDEC&#34;,&#34;#F8B799&#34;,&#34;#579EC9&#34;,&#34;#3C87BD&#34;,&#34;#E8F0F4&#34;,&#34;#81B9D7&#34;,&#34;#E6EFF4&#34;,&#34;#DCEAF2&#34;,&#34;#E9F0F4&#34;,&#34;#053061&#34;],&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:[&#34;#F7F7F7&#34;,&#34;#2D73B3&#34;,&#34;#5FA2CB&#34;,&#34;#3F8CC0&#34;,&#34;#79B3D4&#34;,&#34;#A8D0E4&#34;,&#34;#3D8ABE&#34;,&#34;#ACD2E5&#34;,&#34;#64A6CD&#34;,&#34;#3077B5&#34;,&#34;#C8E0ED&#34;,&#34;#D7E8F1&#34;,&#34;#367FB9&#34;,&#34;#B5D6E8&#34;,&#34;#3F8CC0&#34;,&#34;#79B3D4&#34;,&#34;#8CC1DC&#34;,&#34;#4E98C6&#34;,&#34;#88BEDA&#34;,&#34;#053061&#34;,&#34;#4393C3&#34;,&#34;#85BBD9&#34;,&#34;#6EACD1&#34;,&#34;#296EB0&#34;,&#34;#3B87BD&#34;,&#34;#88BEDA&#34;,&#34;#F8B799&#34;,&#34;#73AFD2&#34;,&#34;#296FB1&#34;,&#34;#4393C3&#34;,&#34;#408EC1&#34;,&#34;#2064A9&#34;,&#34;#F7F7F7&#34;,&#34;#C8E0ED&#34;,&#34;#66A7CE&#34;,&#34;#529BC7&#34;,&#34;#3984BB&#34;,&#34;#ACD2E5&#34;,&#34;#A8D0E4&#34;,&#34;#3279B6&#34;,&#34;#357EB8&#34;,&#34;#519AC7&#34;,&#34;#4190C2&#34;,&#34;#77B2D4&#34;,&#34;#F7F7F7&#34;,&#34;#408FC1&#34;,&#34;#053061&#34;,&#34;#3E8BBF&#34;,&#34;#6EACD1&#34;,&#34;#B7D7E8&#34;,&#34;#4190C2&#34;,&#34;#539BC8&#34;,&#34;#053061&#34;,&#34;#6EACD1&#34;,&#34;#3D89BE&#34;,&#34;#C6DFED&#34;,&#34;#154F8C&#34;,&#34;#3F8DC0&#34;,&#34;#5FA2CB&#34;,&#34;#D1E5F0&#34;,&#34;#2D73B3&#34;,&#34;#6EACD1&#34;,&#34;#408FC1&#34;,&#34;#A8D0E4&#34;,&#34;#2E75B4&#34;,&#34;#053061&#34;,&#34;#053061&#34;,&#34;#E9F0F4&#34;,&#34;#BBD9E9&#34;,&#34;#053061&#34;,&#34;#7FB7D7&#34;,&#34;#DCEAF2&#34;,&#34;#2E75B4&#34;,&#34;#053061&#34;,&#34;#3E8BBF&#34;,&#34;#3C88BE&#34;,&#34;#6EACD1&#34;,&#34;#88BEDA&#34;,&#34;#7FB7D7&#34;,&#34;#2D73B3&#34;,&#34;#88BEDA&#34;,&#34;#17518F&#34;,&#34;#5CA0CA&#34;,&#34;#4190C2&#34;,&#34;#519AC7&#34;,&#34;#68A8CE&#34;,&#34;#3F8CC0&#34;,&#34;#BBD9E9&#34;,&#34;#5CA0CA&#34;,&#34;#519AC7&#34;,&#34;#053061&#34;,&#34;#DCEAF2&#34;,&#34;#68A8CE&#34;,&#34;#2F76B4&#34;,&#34;#68A8CE&#34;,&#34;#4F99C6&#34;,&#34;#2368AD&#34;,&#34;#053061&#34;,&#34;#BBD9E9&#34;,&#34;#C0DCEB&#34;,&#34;#9DCAE1&#34;,&#34;#6EACD1&#34;,&#34;#E4EEF3&#34;,&#34;#C2DDEC&#34;,&#34;#F8B799&#34;,&#34;#579EC9&#34;,&#34;#3C87BD&#34;,&#34;#E8F0F4&#34;,&#34;#81B9D7&#34;,&#34;#E6EFF4&#34;,&#34;#DCEAF2&#34;,&#34;#E9F0F4&#34;,&#34;#053061&#34;],&#34;fillOpacity&#34;:0.7},null,null,null,null,null,{&#34;interactive&#34;:false,&#34;permanent&#34;:false,&#34;direction&#34;:&#34;auto&#34;,&#34;opacity&#34;:1,&#34;offset&#34;:[0,0],&#34;textsize&#34;:&#34;10px&#34;,&#34;textOnly&#34;:false,&#34;className&#34;:&#34;&#34;,&#34;sticky&#34;:true},null]},{&#34;method&#34;:&#34;addLayersControl&#34;,&#34;args&#34;:[[&#34;Eating&#34;,&#34;Climbing&#34;,&#34;Running&#34;],[],{&#34;collapsed&#34;:false,&#34;autoZIndex&#34;:true,&#34;position&#34;:&#34;topright&#34;}]},{&#34;method&#34;:&#34;addLegend&#34;,&#34;args&#34;:[{&#34;colors&#34;:[&#34;#053061 , #053061 0%, #4393C3 20%, #D1E5F0 40%, #FDDBC7 60%, #D6604D 80%, #67001F 100%, #67001F &#34;],&#34;labels&#34;:[&#34;0%&#34;,&#34;20%&#34;,&#34;40%&#34;,&#34;60%&#34;,&#34;80%&#34;,&#34;100%&#34;],&#34;na_color&#34;:null,&#34;na_label&#34;:&#34;NA&#34;,&#34;opacity&#34;:0.5,&#34;position&#34;:&#34;bottomright&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;title&#34;:&#34;Percentage&#34;,&#34;extra&#34;:{&#34;p_1&#34;:0,&#34;p_n&#34;:1},&#34;layerId&#34;:null,&#34;className&#34;:&#34;info legend&#34;,&#34;group&#34;:null}]},{&#34;method&#34;:&#34;addScaleBar&#34;,&#34;args&#34;:[{&#34;maxWidth&#34;:100,&#34;metric&#34;:true,&#34;imperial&#34;:true,&#34;updateWhenIdle&#34;:true,&#34;position&#34;:&#34;bottomleft&#34;}]}],&#34;limits&#34;:{&#34;lat&#34;:[40.764,40.8],&#34;lng&#34;:[-73.982,-73.95]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is an interactive map that is fully movable and zoomable, provided you are connected to the internet. &lt;em&gt;If you aren’t connected to the internet: how did you reach this website? Teach me your dark and mysterious skills.&lt;/em&gt; Speaking of dark: I chose a dark background map because I like the way it contrasts with the colours of the circles. Looks especially sweet in dark mode. Click on the subgroups in the upper right corner to see the spatial distributions of their percentages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The code is pretty self explanatory, and I will save a more detailed exploration of leaflet for a future blog post. The different sub-datasets for each action are added as &lt;code&gt;CircleMarkers&lt;/code&gt; using our &lt;code&gt;èxtract_percentages&lt;/code&gt; function. For the colour-coding we define a diverging palette. Each dataset is a layer with a &lt;code&gt;group&lt;/code&gt; attribute which is used to define the switch between them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Among the things we see in the data, there is a tendency for sightings of squirrels eating to be located in the inner part of the park vs the edges. A lot of climbing happens on the east side; and there’s more running in the north. &lt;em&gt;Feel free to supply fitting stereotypes or jokes about Manhattan here - I’m blissfully unaware of any.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For a more serious analysis there would the caveat that some of the spatial bins will have small numbers of squirrels overall, which leads to large uncertainties for those percentages. This is something that would need to be taken into account in a deeper analysis.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Read the &lt;a href=&#34;https://www.tidyverse.org/articles/2019/06/rlang-0-4-0/&#34;&gt;announcement for curly-curly&lt;/a&gt; and the &lt;a href=&#34;https://tidyr.tidyverse.org/articles/pivot.html&#34;&gt;new pivoting vignette&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the moment, situations where one or more variables are simply quoted are the best use cases for &lt;code&gt;{{ }}&lt;/code&gt;. Beyond that, &lt;a href=&#34;https://stackoverflow.com/questions/56936372/curly-curly-tidy-evaluation-and-modifying-inputs-or-their-names&#34;&gt;operations that require modification of variables&lt;/a&gt; still need &lt;code&gt;enquo&lt;/code&gt;. This might &lt;a href=&#34;http://rpubs.com/lionel-/superstache&#34;&gt;change in the near future&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A great introduction to the capabilities of leaflet can be found &lt;a href=&#34;https://rstudio.github.io/leaflet/&#34;&gt;here&lt;/a&gt;. It is also a popular tool for exploratory Kernels on Kaggle, for instance on &lt;a href=&#34;https://www.kaggle.com/headsortails/be-my-guest-recruit-restaurant-eda&#34;&gt;restaurants in Japan&lt;/a&gt; or &lt;a href=&#34;https://www.kaggle.com/headsortails/nyc-taxi-eda-update-the-fast-the-curious&#34;&gt;Taxi rides in NYC&lt;/a&gt; (&lt;em&gt;for an unknown number of squirrel passengers&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As you might expect, Tidy Tuesday is a weekly challenge with tons of interesting data and many talented participants. Make sure to check out #tidytuesday on Twitter for frequent examples of creative visuals.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tidy evaluation in R: Part 2 - Complex use cases (feat. facet zoom)</title>
      <link>https://heads0rtai1s.github.io/2019/08/22/tidy-eval-examples-part2/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heads0rtai1s.github.io/2019/08/22/tidy-eval-examples-part2/</guid>
      <description>
&lt;script src=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;In an &lt;a href=&#34;https://heads0rtai1s.github.io/2019/04/24/tidy-eval-examples/&#34;&gt;earlier post&lt;/a&gt; I gave a gentle introduction to &lt;a href=&#34;https://tidyeval.tidyverse.org/&#34;&gt;tidy evaluation&lt;/a&gt; in the R &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt; using simple examples. I covered quoting with &lt;code&gt;enquo&lt;/code&gt; and unquoting with &lt;code&gt;!!&lt;/code&gt; in brief &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;ggplot2&lt;/code&gt; snippets. Today, I aim to build a collection of more complex use cases involving additional tools.&lt;/p&gt;
&lt;p&gt;Those are our libraries:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;libs &amp;lt;- c(&amp;#39;dplyr&amp;#39;, &amp;#39;stringr&amp;#39;,             # wrangling
          &amp;#39;knitr&amp;#39;,&amp;#39;kableExtra&amp;#39;,           # table styling
          &amp;#39;ggplot2&amp;#39;,&amp;#39;ggforce&amp;#39;)            # plots
invisible(lapply(libs, library, character.only = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time, the &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/diamonds.html&#34;&gt;Diamonds dataset&lt;/a&gt; will be our best friend in exploring the depths of tidy eval. Included in the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggplot2/index.html&#34;&gt;ggplot2 package&lt;/a&gt;, this dataset describes the price of 54k diamonds along with their cut, weight, clarity, size, and other relevant properties. Here are the first 4 rows:&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
carat
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
cut
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
color
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
clarity
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
depth
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
table
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
price
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
x
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
y
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
z
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.23
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Ideal
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
E
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
SI2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
61.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
55
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
326
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.95
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.98
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.43
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.21
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Premium
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
E
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
SI1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
61
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
326
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.89
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.84
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.31
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.23
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Good
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
E
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
VS1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
56.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
327
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.07
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.31
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.29
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Premium
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
I
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
VS2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
62.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
58
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
334
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.63
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Meet &lt;code&gt;enqous&lt;/code&gt; and &lt;code&gt;!!!&lt;/code&gt;:&lt;/strong&gt; The equivalent to &lt;code&gt;enquo&lt;/code&gt; for &lt;strong&gt;quoting more than one variable&lt;/strong&gt; is called &lt;code&gt;enquos&lt;/code&gt;. So far, so plural. The corresponding &lt;strong&gt;unquoting&lt;/strong&gt; method is &lt;code&gt;!!!&lt;/code&gt; - the &lt;em&gt;big bang&lt;/em&gt; operator (remember that &lt;code&gt;!!&lt;/code&gt; is &lt;em&gt;bang-bang&lt;/em&gt;). The tidyverse certainly doesn’t shy away from cosmological superlatives. (The &lt;a href=&#34;https://www.rstudio.com/resources/cheatsheets/&#34;&gt;tidyeval cheat sheet&lt;/a&gt; calls it &lt;em&gt;bang-bang-bang&lt;/em&gt;, which makes more intuitive sense but is less poetic; as a trained astronomer my choice is clear.) Here we see both operators in action:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;group_mean &amp;lt;- function(df, g, x, y){
  
  group_cols &amp;lt;- enquos(x, y)
  mean_col &amp;lt;- enquo(g)
  df %&amp;gt;% 
    group_by(!!! group_cols) %&amp;gt;% 
    summarise(mean = mean(!! mean_col))
}

group_mean(diamonds, price, cut, color) %&amp;gt;% 
  head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
## # Groups:   cut [1]
##   cut   color  mean
##   &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Fair  D     4291.
## 2 Fair  E     3682.
## 3 Fair  F     3827.
## 4 Fair  G     4239.
## 5 Fair  H     5136.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Alternative: use &lt;code&gt;...&lt;/code&gt; aka dots:&lt;/strong&gt; Note, that if all you need to do is group together a bunch of variables (or to treat them as one group in any other way) then R offers the nifty &lt;code&gt;...&lt;/code&gt; operator. You might have seen this style in function definitions or help pages already. With the dots you can capture everything that is not explicitely named and refer to it as one entity. This simplifies our above function in the following way:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;group_mean &amp;lt;- function(df, g, ...){
  
  mean_col &amp;lt;- enquo(g)
  df %&amp;gt;% 
    group_by(...) %&amp;gt;% 
    summarise(mean = mean(!! mean_col))
}

group_mean(diamonds, price, cut, color) %&amp;gt;% 
  head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
## # Groups:   cut [1]
##   cut   color  mean
##   &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Fair  D     4291.
## 2 Fair  E     3682.
## 3 Fair  F     3827.
## 4 Fair  G     4239.
## 5 Fair  H     5136.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s important to note that &lt;code&gt;!!!&lt;/code&gt; currently doesn’t work in &lt;code&gt;ggplot(aes())&lt;/code&gt;. &lt;a href=&#34;https://stackoverflow.com/questions/55815963/tidyeval-splice-operator-fails-with-ggplots-aes&#34;&gt;There is a workaround&lt;/a&gt; and hopefully soon a fix that I will cover in a future post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;:=&lt;/code&gt; operator:&lt;/strong&gt; to &lt;strong&gt;rename a variable to a quoted name&lt;/strong&gt; you need the &lt;code&gt;:=&lt;/code&gt; operator. Think of it as a maths-style definition if that helps you to remember the syntax. Here’s how it works, giving our mean price variable a custom name:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;group_mean &amp;lt;- function(df, g, n, ...){
  
  mean_col &amp;lt;- enquo(g)
  new_name &amp;lt;- enquo(n)
  
  df %&amp;gt;% 
    group_by(...) %&amp;gt;% 
    summarise(!! new_name := mean(!! mean_col))
}

group_mean(diamonds, price, mean_price, cut, color) %&amp;gt;% 
  head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
## # Groups:   cut [1]
##   cut   color mean_price
##   &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 Fair  D          4291.
## 2 Fair  E          3682.
## 3 Fair  F          3827.
## 4 Fair  G          4239.
## 5 Fair  H          5136.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This operator becomes more useful in complex functions or when you are writing your own packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encoding strings with &lt;code&gt;ensym&lt;/code&gt;:&lt;/strong&gt; In some scenarios you want to quote your input not as an expression but a symbol. In the context of helper functions this will often involve strings - and a common use case is &lt;code&gt;ggplot2&lt;/code&gt; wrappers. The strings can then be further manipulated for instance with the tidy &lt;a href=&#34;https://cran.r-project.org/web/packages/stringr/vignettes/stringr.html&#34;&gt;&lt;code&gt;stringr&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;In this final example of the post I will showcase the use of &lt;code&gt;ensym&lt;/code&gt; alongside the other main &lt;code&gt;tidyeval&lt;/code&gt; operators. The function will be a &lt;code&gt;ggplot2&lt;/code&gt; convenience wrapper that build a scatter plot of two numerical features colour-coded by a categorical variable. Custom axes labels and plot title will be added. For a little extra flourish, I will add a zoom view on one particular category using the powerful &lt;code&gt;facet_zoom&lt;/code&gt; function from the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggforce/index.html&#34;&gt;&lt;code&gt;ggforce&lt;/code&gt;&lt;/a&gt; package. Here’s what it looks like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_xy &amp;lt;- function(df, x, y, col, var_zoom, ...){
  
  x &amp;lt;- enquo(x)
  y &amp;lt;- enquo(y)
  col &amp;lt;- enquo(col)
  group_vars &amp;lt;- enquos(...)
  
  dfname &amp;lt;- ensym(df) %&amp;gt;% str_to_sentence()
  xname &amp;lt;- ensym(x) %&amp;gt;% str_to_sentence()
  yname &amp;lt;- ensym(y) %&amp;gt;% str_to_sentence()
  colname &amp;lt;- ensym(col) %&amp;gt;% str_to_sentence()
  
  df %&amp;gt;% 
    mutate(!! col := as.factor(!! col)) %&amp;gt;% 
    group_by(!! col, !!! group_vars) %&amp;gt;% 
    summarise(mean_x = mean(!!x),
              mean_y = mean(!!y)) %&amp;gt;% 
    ungroup() %&amp;gt;% 
    ggplot(aes(mean_x, mean_y, col = !!col)) +
    geom_point() +
    scale_color_brewer(type = &amp;quot;qual&amp;quot;, palette = &amp;quot;Set1&amp;quot;) +
    labs(x = xname, y = yname, col = colname) +
    ggtitle(str_c(dfname, &amp;quot; dataset: &amp;quot;,
                  xname, &amp;quot; vs &amp;quot;, yname,
                  &amp;quot; with colour coding by &amp;quot;, colname),
            subtitle = str_c(&amp;quot;Zoom view to emphasise &amp;quot;,
                             colname, &amp;quot; = &amp;quot;, var_zoom)) +
    facet_zoom(x = (!! col == var_zoom))
}

plot_xy(diamonds, carat, price, clarity, &amp;quot;IF&amp;quot;, color, cut)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://heads0rtai1s.github.io/post/2019-08-22-tidy-eval-complex-examples_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s break it down:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; features are encoded using &lt;code&gt;enquo&lt;/code&gt; and &lt;code&gt;!!&lt;/code&gt;, as covered in the &lt;a href=&#34;https://heads0rtai1s.github.io/2019/04/24/tidy-eval-examples/&#34;&gt;previous post&lt;/a&gt;. Those variables will form our scatter plot. But now, they are also encoded using &lt;code&gt;ensym&lt;/code&gt; as &lt;code&gt;xname&lt;/code&gt; and &lt;code&gt;yname&lt;/code&gt;. Those are symbols that we can now use in string functions to build custom plot titles and labels.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;col&lt;/code&gt; feature is also encoded both as a quote and a symbol. This needs to be a categorical feature that we will use to colour-code the data points. The legend is the default style and position. Note, that we use &lt;code&gt;:=&lt;/code&gt; to preserve the column name when transforming this feature from character to factor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;string_to_sentence&lt;/code&gt; tool, from the &lt;code&gt;stringr&lt;/code&gt; package, simply capitalises our input strings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additional grouping variables are encoded using &lt;code&gt;enquos&lt;/code&gt; and spliced into the &lt;code&gt;group_by&lt;/code&gt; call via &lt;code&gt;!!!&lt;/code&gt;. By using the dots &lt;code&gt;...&lt;/code&gt; in the function call we give ourselves the option to use an arbitrary number of grouping features in this function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What the function does, is to group the data by the grouping variables (here: Color and Cut) plus the colour-coding feature (here: Clarity). Then it computes the group mean for the x and y features (here: Carat and Price). It plots these group means in a colour-coded scatter plot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, it zooms into one particular category of the colour-coding (here: Clarity = “IF”) and provides a magnified view. This zoom view is shown in the lower panel. The upper panel shows the entire data set. Note, that this upper panel has a darker background (and a connecting region) to indicate where the zoom view is located in the overall picture.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The zoom facet is provided by the &lt;code&gt;ggforce&lt;/code&gt; tool &lt;code&gt;facet_zoom&lt;/code&gt; which is very useful for examining specific data points. Here we only zoom into the x-axis, but it can also provide zooms on the y axis or for both axes simultaneously.&lt;/p&gt;
&lt;p&gt;More Resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Rstudio’s excellent &lt;a href=&#34;https://www.rstudio.com/resources/cheatsheets/&#34;&gt;cheats sheets&lt;/a&gt; include a tidyeval specimen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The prolific &lt;a href=&#34;https://community.rstudio.com/&#34;&gt;Rstudio Community&lt;/a&gt; has a tag for &lt;a href=&#34;https://community.rstudio.com/tags/c/tidyverse/tidyeval&#34;&gt;tidyeval questions and solutions&lt;/a&gt;, among many other interesting topics.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Data flow visuals - alluvial vs ggalluvial in R</title>
      <link>https://heads0rtai1s.github.io/2019/06/06/visuals-alluvial-ggalluvial/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heads0rtai1s.github.io/2019/06/06/visuals-alluvial-ggalluvial/</guid>
      <description>
&lt;script src=&#34;https://heads0rtai1s.github.io/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I have long been a fan of creative data visualisation techniques. For me, the choice of visual representation is driven by both the type of data and the kind of question one wants to examine.&lt;/p&gt;
&lt;p&gt;The power of its visualisation tools has been a major strength of the R language well before the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggplot2/index.html&#34;&gt;ggplot2&lt;/a&gt; package and the &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt; burst onto the scene. Today’s post will be an introductory examination of two similar packages that allow us to study the connection and &lt;em&gt;flow&lt;/em&gt; of data between different categorical features via &lt;strong&gt;alluvial plots&lt;/strong&gt;. Those packages are &lt;a href=&#34;https://cran.r-project.org/web/packages/alluvial/vignettes/alluvial.html&#34;&gt;alluvial&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/ggalluvial/vignettes/ggalluvial.html&#34;&gt;ggalluvial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All in all we need the following libraries:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;libs &amp;lt;- c(&amp;#39;dplyr&amp;#39;, &amp;#39;stringr&amp;#39;, &amp;#39;forcats&amp;#39;,     # wrangling
          &amp;#39;knitr&amp;#39;,&amp;#39;kableExtra&amp;#39;,               # table styling
          &amp;#39;ggplot2&amp;#39;,&amp;#39;alluvial&amp;#39;,&amp;#39;ggalluvial&amp;#39;,  # plots
          &amp;#39;nycflights13&amp;#39;)                     # data
invisible(lapply(libs, library, character.only = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alluvial plots are best explained by showing one. For illustrating the following examples we will take on board the flights data from the &lt;a href=&#34;https://cran.r-project.org/web/packages/nycflights13/index.html&#34;&gt;nycflights13 library&lt;/a&gt;. This comprehensive data set contains all flights that departed from the New York City airports JFK, LGA, and EWR in 2013. For this analysis, we will only look at three features - the 1st-class features if you will: airport of origin, destination airport, and carrier (i.e. airline code). From the metaphorical front of the cabin, here are the first 4 rows:&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
origin
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
carrier
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
dest
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
EWR
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
UA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
IAH
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
LGA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
UA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
IAH
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
JFK
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
AA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
MIA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
JFK
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
B6
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
BQN
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/mbojan/alluvial&#34;&gt;alluvial package&lt;/a&gt; was &lt;a href=&#34;http://bc.bojanorama.pl/2014/03/alluvial-diagrams/&#34;&gt;introduced in 2014&lt;/a&gt; to fill a niché in the landscape of visualisations. I have enjoyed using it in the past in &lt;a href=&#34;https://www.kaggle.com/headsortails/treemap-house-of-horror-spooky-eda-lda-features&#34;&gt;several&lt;/a&gt; &lt;a href=&#34;https://www.kaggle.com/headsortails/nyc-taxi-eda-update-the-fast-the-curious&#34;&gt;Kaggle&lt;/a&gt; &lt;a href=&#34;https://www.kaggle.com/headsortails/steering-wheel-of-fortune-porto-seguro-eda&#34;&gt;Kernels&lt;/a&gt;. Here’s what a plot looks like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top_dest &amp;lt;- flights %&amp;gt;% 
  count(dest) %&amp;gt;% 
  top_n(5, n) %&amp;gt;% 
  pull(dest)

top_carrier &amp;lt;- flights %&amp;gt;% 
  filter(dest %in% top_dest) %&amp;gt;% 
  count(carrier) %&amp;gt;% 
  top_n(4, n) %&amp;gt;% 
  pull(carrier)

fly &amp;lt;- flights %&amp;gt;% 
  filter(dest %in% top_dest &amp;amp; carrier %in% top_carrier) %&amp;gt;% 
  count(origin, carrier, dest) %&amp;gt;% 
  mutate(origin = fct_relevel(as.factor(origin), c(&amp;quot;EWR&amp;quot;, &amp;quot;LGA&amp;quot;, &amp;quot;JFK&amp;quot;)))

alluvial(fly %&amp;gt;% select(-n),
         freq=fly$n, border=NA, alpha = 0.5,
         col=case_when(fly$origin == &amp;quot;JFK&amp;quot; ~ &amp;quot;red&amp;quot;,
                       fly$origin == &amp;quot;EWR&amp;quot; ~ &amp;quot;blue&amp;quot;,
                       TRUE ~ &amp;quot;orange&amp;quot;),
         cex=0.75,
         axis_labels = c(&amp;quot;Origin&amp;quot;, &amp;quot;Carrier&amp;quot;, &amp;quot;Destination&amp;quot;),
         hide = fly$n &amp;lt; 150)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://heads0rtai1s.github.io/post/2019-06-06-visuals_alluvial_ggalluvial_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The features are arranged horizontally, with their value counts stacked vertically. This corresponds to a stacked barplot: e.g. for the destinations “BOS” has fewer flights than “LAX”. Here we only look at the top 5 destination and their top 4 carriers (that’s the first two segments of the code above).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The “alluvia” are the bands that connect the features from left to right. Alluvia break down all feature combinations, with complexity increasing also from left to right. These sub-segments are called “flows”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This means that starting from the 3 origin airports on the left there are 4 “flows” each (i.e. 12 in total) connecting to the 4 main carriers. Between carrier and destination these then fan out into 5 flows each for a theoretical total of 60 different flows. In practice, we want to use the &lt;code&gt;hide&lt;/code&gt; parameter to exclude those flows that only have a few observations so that we can focus on the big picture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For further styling, a &lt;code&gt;border&lt;/code&gt; colour can be assigned to each alluvium. This would allow us to distinguish the different flows on the left side that then break into sub-flows on the right side. Feel free to try it out. Personally, I think the plot looks better without border colours.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We chose a colour coding (argument &lt;code&gt;col&lt;/code&gt;) that puts focus on the origin airports. The first argument of the &lt;code&gt;alluvial&lt;/code&gt; function is the data set, followed by the frequency column (&lt;code&gt;freq&lt;/code&gt;). Note that &lt;code&gt;alluvial&lt;/code&gt; expects the data already to be in the shape of grouped counts (as prepared via &lt;code&gt;count&lt;/code&gt; in the third code segment above).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In my view, the best transparency for alluvia is the default &lt;code&gt;alpha = 0.5&lt;/code&gt;. As usual, &lt;code&gt;cex&lt;/code&gt; does the font scaling and &lt;code&gt;axis_lables&lt;/code&gt; is pretty self-explanatory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;alluvial&lt;/code&gt; function has an &lt;code&gt;ordering&lt;/code&gt; parameter, but it’s generally better to do the ordering through factor re-levelling when preparing the data (via the tidyverse &lt;a href=&#34;https://cran.r-project.org/web/packages/forcats/&#34;&gt;forcats library&lt;/a&gt;). Here we only change the order for the &lt;code&gt;origin&lt;/code&gt; feature.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, other than looking pretty, what insights does it give us? Well, for instance we see that (for this subset) EWR is dominated by UA (United Airlines) and has almost no AA (American Airlines flights). In turn, UA flights are not frequent in LGA or JFK. Both Boston (BOS) and Los Angeles (LAX) are not connected to LGA (orange). &lt;strong&gt;Thus, the alluvial plot shows us - pretty literally in this case - the flow of flight volume between airports through airline carriers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now, the &lt;code&gt;alluvial&lt;/code&gt; tool has a rather specific syntax and doesn’t integrate seamlessly with the tidyverse. Enter the &lt;a href=&#34;https://github.com/corybrunson/ggalluvial&#34;&gt;&lt;code&gt;ggalluvial&lt;/code&gt; library&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fly %&amp;gt;% 
  mutate(origin = fct_rev(as.factor(origin)),
         carrier = fct_rev(as.factor(carrier)),
         dest = fct_rev(as.factor(dest))) %&amp;gt;% 
  filter(n &amp;gt; 150) %&amp;gt;% 
  ggplot(aes(y = n, axis1 = origin, axis2 = carrier, axis3 = dest)) +
  geom_alluvium(aes(fill = origin), aes.bind=TRUE, width = 1/12) +
  geom_stratum(width = 1/4, fill = &amp;quot;white&amp;quot;, color = &amp;quot;black&amp;quot;) +
  geom_text(stat = &amp;quot;stratum&amp;quot;, label.strata = TRUE) +
  scale_x_discrete(limits = c(&amp;quot;Origin&amp;quot;, &amp;quot;Carrier&amp;quot;, &amp;quot;Destination&amp;quot;),
                   expand = c(.05, .05)) +
  scale_fill_manual(values = c(&amp;quot;red&amp;quot;, &amp;quot;orange&amp;quot;, &amp;quot;blue&amp;quot;)) +
  labs(y = &amp;quot;Cases&amp;quot;) +
  theme_minimal() +
  theme(legend.position = &amp;quot;none&amp;quot;) +
  ggtitle(&amp;quot;NYC flights volume for top destinations and airlines&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://heads0rtai1s.github.io/post/2019-06-06-visuals_alluvial_ggalluvial_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here I purposefully choose the styling parameters to (broadly) reproduce the above plot. It is evident that &lt;code&gt;ggalluvial&lt;/code&gt; integrates much more smoothly into the &lt;code&gt;ggplot2&lt;/code&gt; grammar. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The alluvia and the vertical features (the “strata”; here: origin, carrier, and destination) are implemented as different geometry layers. Note, that the default order of the strata features is reversed compared to &lt;code&gt;alluvial&lt;/code&gt;. Also: there are no gaps between the strata here compared to what &lt;code&gt;alluvial&lt;/code&gt; does. This makes it easier to add a y-axis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I decided not to change the default y-axis and subtle background grid lines, which provide quantitative information and guide the eye. Replace &lt;code&gt;theme_minimal()&lt;/code&gt; by &lt;code&gt;theme_void()&lt;/code&gt; to get very close to the &lt;code&gt;alluvial&lt;/code&gt; plot style.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By default, &lt;code&gt;ggalluvial&lt;/code&gt; plots the same number of flows between neighbouring strata. This behaviour can be changed by the &lt;code&gt;aes.bind=TRUE&lt;/code&gt; parameter in &lt;code&gt;geom_alluvial&lt;/code&gt;. Remove it to see the difference with a larger number of narrower flows between the origin and carrier strata.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are setting the colours manually. One advantage of &lt;code&gt;ggalluvial&lt;/code&gt; is that instead of a manual setting you can use any &lt;code&gt;ggplot2&lt;/code&gt; (or add-on) scale such as &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/scale_brewer.html&#34;&gt;&lt;code&gt;brewer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/scale_viridis.html&#34;&gt;&lt;code&gt;viridis&lt;/code&gt;&lt;/a&gt;. Similarly we can modify the plot &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/theme.html&#34;&gt;&lt;code&gt;theme&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Instead of &lt;code&gt;geom_text&lt;/code&gt; you can use &lt;code&gt;geom_label&lt;/code&gt;, e.g. in combination with a different &lt;code&gt;fill&lt;/code&gt; colour in &lt;code&gt;geom_stratum&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In closing: both packages are versatile and provide somewhat different approaches to creating alluvial plots. If you are frequently working within the tidyverse then &lt;code&gt;ggalluvial&lt;/code&gt; might be more intuitive for you. Specific (edge) cases might be better handled by one tool than the other.&lt;/p&gt;
&lt;p&gt;For more information check out the respective vignettes for &lt;a href=&#34;https://cran.r-project.org/web/packages/ggalluvial/vignettes/ggalluvial.html&#34;&gt;&lt;code&gt;ggalluvial&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/alluvial/vignettes/alluvial.html&#34;&gt;&lt;code&gt;alluvial&lt;/code&gt;&lt;/a&gt; as well as their &lt;a href=&#34;https://github.com/corybrunson/ggalluvial&#34;&gt;pages&lt;/a&gt; on &lt;a href=&#34;https://github.com/mbojan/alluvial&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
