<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on head spin - the Heads or Tails blog</title>
    <link>https://heads0rtai1s.github.io/categories/r/</link>
    <description>Recent content in R on head spin - the Heads or Tails blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Nov 2019 00:00:00 +0000</lastBuildDate>

        <atom:link href="https://heads0rtai1s.github.io/categories/r/index.xml" rel="self" type="application/rss+xml" />


    <item>
      <title>Tidyverse evolutions: curly-curly operator and pivoting (feat. tidytuesday data &amp; leaflet visuals)</title>
      <link>https://heads0rtai1s.github.io/2019/11/07/tidy-curly-pivot-leaflet/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>

      <guid>https://heads0rtai1s.github.io/2019/11/07/tidy-curly-pivot-leaflet/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/leaflet/leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/leaflet/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/leafletfix/leafletfix.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/Proj4Leaflet/proj4-compressed.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/Proj4Leaflet/proj4leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/rstudio_leaflet/rstudio_leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/leaflet-binding/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/leaflet-providers/leaflet-providers.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/leaflet-providers-plugin/leaflet-providers-plugin.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;The &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt; ecosystem is steadily growing and adapting to the needs of its users. As part of this evolution, existing tools are being replaced by new and better methods. As useful as this flexibility is to the strength of the system, sometimes it can be hard to keep track of all the changes. &lt;strong&gt;This blogpost will deal with two new developments: the ‘curly-curly’ operator for tidy evaluation and the new ‘pivot’ functions for data reshaping.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We will need the following libraries; in particular make sure that you have installed at least &lt;code&gt;tidyr&lt;/code&gt; version 1.0:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;libs &amp;lt;- c(&amp;#39;dplyr&amp;#39;, &amp;#39;tidyr&amp;#39;,          # wrangling
          &amp;#39;readr&amp;#39;, &amp;#39;stringr&amp;#39;,        # wrangling
          &amp;#39;knitr&amp;#39;,&amp;#39;kableExtra&amp;#39;,      # table styling
          &amp;#39;ggplot2&amp;#39;,&amp;#39;gridExtra&amp;#39;,     # plots
          &amp;#39;leaflet&amp;#39;)                 # interactive maps
invisible(lapply(libs, library, character.only = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this post’s dataset we’ll be doing something different than sampling the usual in-built tables. We will work with the &lt;a href=&#34;https://www.nationalgeographic.com/animals/2019/06/squirrel-census-new-york-city-central-park/&#34;&gt;famous&lt;/a&gt; &lt;a href=&#34;https://www.thesquirrelcensus.com&#34;&gt;NYC Squirrel Census&lt;/a&gt; - cataloguing the squirrel population of New York’s Central Park in October 2018. The squirrel census is a great example for a citizen science project that’s both accessible fun and useful scientific contribution.&lt;/p&gt;
&lt;p&gt;Talking about fun community projects: the specific dataset we’re using has been prepared by the &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34;&gt;TidyTuesday project&lt;/a&gt;, a weekly social exercise to test our tidyverse skills and provide inspiration. TidyTuesday is run by the &lt;a href=&#34;https://www.rfordatasci.com&#34;&gt;R for Data Science&lt;/a&gt; Online Learning Community. All datasets are available on github:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;squirrels &amp;lt;- read_csv(str_c(
  &amp;quot;https://raw.githubusercontent.com/&amp;quot;,
  &amp;quot;rfordatascience/tidytuesday/master/&amp;quot;,
  &amp;quot;data/2019/2019-10-29/nyc_squirrels.csv&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;squirrels %&amp;gt;%
  select(lat, long, date, running, climbing, eating) %&amp;gt;%
  head(5) %&amp;gt;%
  kable() %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
lat
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
long
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
running
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
climbing
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
eating
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.79408
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.95613
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10142018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.79485
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.95704
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.76672
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.97683
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10102018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.76970
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.97572
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10182018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.79753
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.95931
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10182018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Among other features, the squirrels data includes the latitude and longitude of the sighting, the date, and flags that indicate whether this squirrel was spotted running, climbing, or eating. True to tidy form, each row corresponds to one squirrel. There are many more features in the full dataset, but we will focus on the ones above in the following examples.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, we will cover tidy evaluation with the &lt;code&gt;{{ }}&lt;/code&gt; operator aka ‘curly-curly’.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Introduced as part of &lt;a href=&#34;https://www.tidyverse.org/articles/2019/06/rlang-0-4-0/&#34;&gt;rlang version 0.4.0&lt;/a&gt; back in June, curly-curly replaces the approach of quoting with &lt;code&gt;enquo&lt;/code&gt; and unquoting with &lt;code&gt;!!&lt;/code&gt; (aka ‘bang-bang’). Instead of two operations it provides a compact shorthand for simple cases. Here is a brief example for counting groups of distinct feature values:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# new style
count_groups &amp;lt;- function(df, groupvar){
  df %&amp;gt;%
    group_by({{ groupvar }}) %&amp;gt;%
    count()
}

count_groups(squirrels, climbing) %&amp;gt;%
  kable() %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
climbing
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2365
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
658
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this example, &lt;code&gt;{{ groupvar }}&lt;/code&gt; splices the value of &lt;code&gt;groupvar&lt;/code&gt; into the &lt;code&gt;group_by&lt;/code&gt; call, rather than its name. This is equivalent to the quote-unquote style of &lt;code&gt;!! enquo(groupvar)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# old style
count_groups_old &amp;lt;- function(df, groupvar){
  df %&amp;gt;%
    group_by(!! enquo(groupvar)) %&amp;gt;%
    count()
}

count_groups_old(squirrels, climbing) %&amp;gt;%
  kable() %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
climbing
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2365
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
658
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The advantage of &lt;code&gt;{{ }}&lt;/code&gt; lies in its relative cognitive ease: think of it as inserting the value of the variable into the expression. No intermediate quoting or unquoting needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next, we will look at how to reshape data with the &lt;a href=&#34;https://tidyr.tidyverse.org/articles/pivot.html&#34;&gt;new functions&lt;/a&gt; &lt;code&gt;pivot_wider&lt;/code&gt; and &lt;code&gt;pivot_longer&lt;/code&gt;&lt;/strong&gt;, which are replacing the previous &lt;code&gt;spread&lt;/code&gt; and &lt;code&gt;gather&lt;/code&gt; tools. Most importantly: &lt;code&gt;pivot_wider&lt;/code&gt; is the inverse function to &lt;code&gt;pivot_longer&lt;/code&gt;, and vice versa.&lt;/p&gt;
&lt;p&gt;As the name suggests, &lt;code&gt;pivot_wider&lt;/code&gt; makes a tibble wider by turning a single categorical column into multiple columns, one for each category.&lt;/p&gt;
&lt;p&gt;Let’s look at this aggregated data frame of sightings of climbing squirrels per day:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;squirrels %&amp;gt;%
  count(date, climbing) %&amp;gt;%
  head(4) %&amp;gt;%
  kable() %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
climbing
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
253
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
84
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
283
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
122
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Pivoting to a wider format allows us to compare the numbers of climbing and non-climbing squirrels directly next to each other:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# new style with pivot_wider
squirrels %&amp;gt;%
  count(date, climbing) %&amp;gt;%
  pivot_wider(names_from = climbing, values_from = n, names_prefix = &amp;quot;climbing_&amp;quot;) %&amp;gt;%
  head(2) %&amp;gt;%
  kable() %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_FALSE
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_TRUE
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
253
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
84
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
283
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
122
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;names_from&lt;/code&gt; argument indicates which column supplies the new column names. The values of this column are being picked from the feature defined via the &lt;code&gt;values_from&lt;/code&gt; keyword. Here, we pick the names from the binary feature &lt;code&gt;climbing&lt;/code&gt; and the values from the count column &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Among the additional keywords, &lt;code&gt;names_prefix&lt;/code&gt; allows us to assign meaningful names to the new columns (which would otherwise simply be the rather generic ‘FALSE’ and ‘TRUE’ here). Another useful keyword is &lt;code&gt;values_fill&lt;/code&gt;, which specifies a global replacement for any missing values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The new &lt;code&gt;pivot_wider&lt;/code&gt; replaces the old &lt;code&gt;spread&lt;/code&gt; function, which had comparable yet possibly more confusing parameters. For comparison, here is the same result with &lt;code&gt;spread&lt;/code&gt;:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# old style with spread
squirrels %&amp;gt;%
  count(date, climbing) %&amp;gt;%
  spread(key = climbing, value = n) %&amp;gt;%
  head(2) %&amp;gt;%
  kable() %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
FALSE
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
TRUE
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
253
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
84
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
283
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
122
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The syntax is very similar, which should make it easy for those familiar with &lt;code&gt;spread&lt;/code&gt; to switch to &lt;code&gt;pivot_wider&lt;/code&gt;. Note, that &lt;code&gt;spread&lt;/code&gt; had no &lt;code&gt;names_prefix&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;In most tutorials, &lt;code&gt;pivot_wider&lt;/code&gt; is somewhat overshadowed by &lt;code&gt;pivot_longer&lt;/code&gt;; but I use it frequently to quickly compute proportions for grouped columns. For instance, here are the top 3 days for spotting squirrels climbing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;squirrels %&amp;gt;%
  count(date, climbing) %&amp;gt;%
  pivot_wider(names_from = climbing, values_from = n, names_prefix = &amp;quot;climbing_&amp;quot;) %&amp;gt;%
  mutate(climbing_percentage = climbing_TRUE/(climbing_TRUE + climbing_FALSE)*100) %&amp;gt;%
  arrange(desc(climbing_percentage)) %&amp;gt;%
  head(3) %&amp;gt;%
  kable() %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_FALSE
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_TRUE
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_percentage
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
283
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
122
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.12346
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
253
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
84
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.92582
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10082018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
220
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.80702
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Let’s move on to &lt;code&gt;pivot_longer&lt;/code&gt;&lt;/strong&gt;. Being the inverse function to &lt;code&gt;pivot_wider&lt;/code&gt;, this tool (often) reduces the number of columns by turning some of the columns into a single new (typically) categorical feature alongside an (often times) numerical feature. The different levels of the categorical column now describe the numerical column in a unique way (similarly to the wider column structure previously). This is all a bit abstract, so let’s do a quick example:&lt;/p&gt;
&lt;p&gt;Imagine we’ve extracted both the proportion of climbing squirrels and non-climbing squirrels for each day with the help of &lt;code&gt;pivot_wider&lt;/code&gt;. (Of course, one number determines the other but let’s use it as a simple illustration).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;squirrels %&amp;gt;%
  count(date, climbing) %&amp;gt;%
  pivot_wider(names_from = climbing, values_from = n, names_prefix = &amp;quot;climbing_&amp;quot;) %&amp;gt;%
  mutate(prop_true = climbing_TRUE/(climbing_TRUE + climbing_FALSE)*100,
         prop_false = climbing_FALSE/(climbing_TRUE + climbing_FALSE)*100) %&amp;gt;%
  head(2) %&amp;gt;%
  kable() %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_FALSE
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
climbing_TRUE
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
prop_true
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
prop_false
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
253
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
84
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.92582
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
75.07418
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
283
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
122
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.12346
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
69.87654
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now we will use &lt;code&gt;pivot_longer&lt;/code&gt; to turn those two &lt;code&gt;prop_&lt;/code&gt; columns into a categorical &lt;code&gt;climbing&lt;/code&gt; and a numerical &lt;code&gt;percentage&lt;/code&gt; feature. Here, we drop the &lt;code&gt;climbing_FALSE&lt;/code&gt; and &lt;code&gt;climbing_TRUE&lt;/code&gt; columns, so the pivoting doesn’t change the number of columns but it changes the structure of the dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;squirrels %&amp;gt;%
  count(date, climbing) %&amp;gt;%
  pivot_wider(names_from = climbing, values_from = n, names_prefix = &amp;quot;climbing_&amp;quot;) %&amp;gt;%
  mutate(prop_true = climbing_TRUE/(climbing_TRUE + climbing_FALSE),
         prop_false = climbing_FALSE/(climbing_TRUE + climbing_FALSE)) %&amp;gt;%
  select(date, prop_true, prop_false) %&amp;gt;%
  pivot_longer(cols = c(&amp;quot;prop_true&amp;quot;, &amp;quot;prop_false&amp;quot;),
               names_to = &amp;quot;climbing&amp;quot;, values_to = &amp;quot;percentage&amp;quot;) %&amp;gt;%
  head(4)  %&amp;gt;%
  kable() %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
climbing
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
percentage
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
prop_true
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.2492582
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10062018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
prop_false
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.7507418
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
prop_true
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.3012346
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10072018
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
prop_false
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.6987654
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;cols&lt;/code&gt; argument specifies the columns that will be pivoted. Then, &lt;code&gt;names_to&lt;/code&gt; gives the name of the new feature that will hold the (categorical) names of the original columns. And &lt;code&gt;values_to&lt;/code&gt; is the new feature that hold their values (here the percentages).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note, that as with the older &lt;code&gt;gather&lt;/code&gt; method, the new column names have to be passed as strings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The resulting data structure is often much better suited for plotting with &lt;code&gt;ggplot2&lt;/code&gt;. The categorical feature can directly become a colour, fill, or faceting variable.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Finally, let’s combine curly-curly and pivoting into a comprehensive example.&lt;/strong&gt; Here, we build a function that takes as arguments the name of a data frame and the name of a logical column, here a squirrel action, and then extracts the percentage of this action per coordinate bin. This is it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;extract_percentage &amp;lt;- function(df, col) {

  df %&amp;gt;%
    mutate(lat = round(lat*5, 2)/5,
         long = round(long*5, 2)/5) %&amp;gt;%
    count(lat, long, {{ col }}) %&amp;gt;%
    pivot_wider(names_from = {{ col }}, values_from = n,
                values_fill = list(n = 0)) %&amp;gt;%
    mutate(true = `TRUE`/(`TRUE` + `FALSE`)*100,
           false = `FALSE`/(`TRUE` + `FALSE`)*100) %&amp;gt;%
    select(lat, long, true, false) %&amp;gt;%
    pivot_longer(cols = c(&amp;quot;true&amp;quot;, &amp;quot;false&amp;quot;),
                 names_to = &amp;quot;action&amp;quot;, values_to = &amp;quot;percentage&amp;quot;) %&amp;gt;%
    filter(action == &amp;quot;true&amp;quot;)
}

extract_percentage(squirrels, climbing) %&amp;gt;%
  head(3)  %&amp;gt;%
  kable() %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
lat
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
long
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
action
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
percentage
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.764
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.974
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
true
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.00000
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.766
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.978
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
true
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.73913
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.766
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-73.976
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
true
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.23077
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The coordinates are rounded the nearest 0.02 degrees to provide the sample size for summary statistics.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We only keep the percentage of positive sightings for each action.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’re now using this function to extract the proportions of squirrels that were observed eating, climbing, or running. Then we visualise those proportions on an interactive map of Manhattan centred on Central Park. The map is constructed using the wonderful &lt;a href=&#34;https://rstudio.github.io/leaflet/&#34;&gt;leaflet&lt;/a&gt; package. Such a map could be used to find locations in the park that might be more promising than others for spotting certain squirrel shenanigans.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;loc &amp;lt;- extract_percentage(squirrels, eating)

pal &amp;lt;- colorNumeric(palette = &amp;quot;RdBu&amp;quot;, domain = seq(0,100), reverse = TRUE)

leaflet(loc) %&amp;gt;%
  setView(lng = median(loc$long), lat = median(loc$lat), zoom = 13) %&amp;gt;%
  #addProviderTiles(&amp;quot;Esri.NatGeoWorldMap&amp;quot;) %&amp;gt;%
  addProviderTiles(providers$CartoDB.DarkMatter) %&amp;gt;%
  addCircleMarkers(~ long, ~ lat,
                   data = extract_percentage(squirrels, eating),
                   group = &amp;quot;Eating&amp;quot;,
                   color = ~ pal(percentage),
                   radius = 6, fillOpacity = 0.7, stroke = FALSE) %&amp;gt;%
  addCircleMarkers(~ long, ~ lat,
                   data = extract_percentage(squirrels, climbing),
                   group = &amp;quot;Climbing&amp;quot;,
                   color = ~ pal(percentage),
                   radius = 6, fillOpacity = 0.7, stroke = FALSE) %&amp;gt;%
  addCircleMarkers(~ long, ~ lat,
                   data = extract_percentage(squirrels, running),
                   group = &amp;quot;Running&amp;quot;,
                   color = ~ pal(percentage),
                   radius = 6, fillOpacity = 0.7, stroke = FALSE) %&amp;gt;%
  addLayersControl(baseGroups = c(&amp;quot;Eating&amp;quot;, &amp;quot;Climbing&amp;quot;, &amp;quot;Running&amp;quot;),
                   options = layersControlOptions(collapsed = FALSE)) %&amp;gt;%
  addLegend(&amp;quot;bottomright&amp;quot;, pal = pal, values = ~ percentage,
            title = &amp;quot;Percentage&amp;quot;, labFormat = labelFormat(suffix = &amp;quot;%&amp;quot;),) %&amp;gt;%
  addScaleBar(&amp;quot;bottomleft&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;setView&#34;:[[40.782,-73.966],13,[]],&#34;calls&#34;:[{&#34;method&#34;:&#34;addProviderTiles&#34;,&#34;args&#34;:[&#34;CartoDB.DarkMatter&#34;,null,null,{&#34;errorTileUrl&#34;:&#34;&#34;,&#34;noWrap&#34;:false,&#34;detectRetina&#34;:false}]},{&#34;method&#34;:&#34;addCircleMarkers&#34;,&#34;args&#34;:[[40.764,40.766,40.766,40.766,40.766,40.768,40.768,40.768,40.768,40.768,40.768,40.768,40.77,40.77,40.77,40.77,40.77,40.77,40.77,40.772,40.772,40.772,40.772,40.772,40.772,40.772,40.774,40.774,40.774,40.774,40.774,40.774,40.774,40.776,40.776,40.776,40.776,40.776,40.776,40.776,40.778,40.778,40.778,40.778,40.778,40.778,40.78,40.78,40.78,40.78,40.78,40.78,40.78,40.782,40.782,40.782,40.782,40.782,40.782,40.782,40.784,40.784,40.784,40.784,40.784,40.784,40.786,40.786,40.786,40.788,40.788,40.788,40.788,40.788,40.788,40.788,40.79,40.79,40.79,40.79,40.79,40.79,40.79,40.792,40.792,40.792,40.792,40.792,40.792,40.792,40.794,40.794,40.794,40.794,40.794,40.794,40.794,40.794,40.796,40.796,40.796,40.796,40.796,40.796,40.796,40.798,40.798,40.798,40.798,40.798,40.798,40.8,40.8],[-73.974,-73.978,-73.976,-73.974,-73.972,-73.982,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.966,-73.976,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.962,-73.972,-73.97,-73.968,-73.966,-73.964,-73.962,-73.96,-73.97,-73.968,-73.966,-73.964,-73.96,-73.958,-73.97,-73.968,-73.958,-73.968,-73.966,-73.964,-73.962,-73.96,-73.958,-73.956,-73.966,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.958,-73.956],6,null,&#34;Eating&#34;,{&#34;interactive&#34;:true,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:false,&#34;color&#34;:[&#34;#053061&#34;,&#34;#2D73B3&#34;,&#34;#E9F0F4&#34;,&#34;#8FC3DD&#34;,&#34;#4996C5&#34;,&#34;#3984BB&#34;,&#34;#94C6DF&#34;,&#34;#3780BA&#34;,&#34;#3C87BD&#34;,&#34;#96C7DF&#34;,&#34;#97C7DF&#34;,&#34;#A8D0E4&#34;,&#34;#408DC0&#34;,&#34;#C9E1EE&#34;,&#34;#75B0D3&#34;,&#34;#62A4CD&#34;,&#34;#6EACD1&#34;,&#34;#7BB4D5&#34;,&#34;#053061&#34;,&#34;#F8B799&#34;,&#34;#3279B6&#34;,&#34;#408DC0&#34;,&#34;#CAE1EE&#34;,&#34;#88BEDA&#34;,&#34;#6EACD1&#34;,&#34;#3D89BE&#34;,&#34;#A8D0E4&#34;,&#34;#73AFD2&#34;,&#34;#E0ECF3&#34;,&#34;#C0DCEB&#34;,&#34;#90C4DD&#34;,&#34;#4190C2&#34;,&#34;#6EACD1&#34;,&#34;#FAECE4&#34;,&#34;#3781BA&#34;,&#34;#529BC7&#34;,&#34;#E1ECF3&#34;,&#34;#61A4CC&#34;,&#34;#B7D7E8&#34;,&#34;#053061&#34;,&#34;#286DB0&#34;,&#34;#88BEDA&#34;,&#34;#96C7DF&#34;,&#34;#5EA1CB&#34;,&#34;#6EACD1&#34;,&#34;#88BEDA&#34;,&#34;#053061&#34;,&#34;#3E8BBF&#34;,&#34;#A8D0E4&#34;,&#34;#3279B6&#34;,&#34;#C9E1EE&#34;,&#34;#EFF3F5&#34;,&#34;#053061&#34;,&#34;#F7F7F7&#34;,&#34;#519AC7&#34;,&#34;#4996C5&#34;,&#34;#8EC2DC&#34;,&#34;#94C6DE&#34;,&#34;#357EB8&#34;,&#34;#4393C3&#34;,&#34;#76B1D3&#34;,&#34;#347CB8&#34;,&#34;#408FC1&#34;,&#34;#053061&#34;,&#34;#7AB4D5&#34;,&#34;#053061&#34;,&#34;#67001F&#34;,&#34;#357EB8&#34;,&#34;#3E8BBF&#34;,&#34;#053061&#34;,&#34;#7FB7D7&#34;,&#34;#3279B6&#34;,&#34;#4393C3&#34;,&#34;#053061&#34;,&#34;#1E61A5&#34;,&#34;#154F8C&#34;,&#34;#6EACD1&#34;,&#34;#E7EFF4&#34;,&#34;#7FB7D7&#34;,&#34;#A3CDE3&#34;,&#34;#6EACD1&#34;,&#34;#17518F&#34;,&#34;#1E61A5&#34;,&#34;#B9D8E9&#34;,&#34;#3D89BE&#34;,&#34;#94C6DF&#34;,&#34;#8FC3DD&#34;,&#34;#1E61A5&#34;,&#34;#3E8BBF&#34;,&#34;#B7D7E8&#34;,&#34;#053061&#34;,&#34;#64A6CD&#34;,&#34;#357DB8&#34;,&#34;#529BC7&#34;,&#34;#A8D0E4&#34;,&#34;#418FC1&#34;,&#34;#BEDBEA&#34;,&#34;#67001F&#34;,&#34;#3E8BBF&#34;,&#34;#5DA1CB&#34;,&#34;#8DC1DC&#34;,&#34;#134A86&#34;,&#34;#4A96C5&#34;,&#34;#C2DDEC&#34;,&#34;#3984BB&#34;,&#34;#579EC9&#34;,&#34;#4291C2&#34;,&#34;#3178B5&#34;,&#34;#3B86BD&#34;,&#34;#1E61A5&#34;,&#34;#3279B6&#34;,&#34;#286DB0&#34;,&#34;#3E8BBF&#34;],&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:[&#34;#053061&#34;,&#34;#2D73B3&#34;,&#34;#E9F0F4&#34;,&#34;#8FC3DD&#34;,&#34;#4996C5&#34;,&#34;#3984BB&#34;,&#34;#94C6DF&#34;,&#34;#3780BA&#34;,&#34;#3C87BD&#34;,&#34;#96C7DF&#34;,&#34;#97C7DF&#34;,&#34;#A8D0E4&#34;,&#34;#408DC0&#34;,&#34;#C9E1EE&#34;,&#34;#75B0D3&#34;,&#34;#62A4CD&#34;,&#34;#6EACD1&#34;,&#34;#7BB4D5&#34;,&#34;#053061&#34;,&#34;#F8B799&#34;,&#34;#3279B6&#34;,&#34;#408DC0&#34;,&#34;#CAE1EE&#34;,&#34;#88BEDA&#34;,&#34;#6EACD1&#34;,&#34;#3D89BE&#34;,&#34;#A8D0E4&#34;,&#34;#73AFD2&#34;,&#34;#E0ECF3&#34;,&#34;#C0DCEB&#34;,&#34;#90C4DD&#34;,&#34;#4190C2&#34;,&#34;#6EACD1&#34;,&#34;#FAECE4&#34;,&#34;#3781BA&#34;,&#34;#529BC7&#34;,&#34;#E1ECF3&#34;,&#34;#61A4CC&#34;,&#34;#B7D7E8&#34;,&#34;#053061&#34;,&#34;#286DB0&#34;,&#34;#88BEDA&#34;,&#34;#96C7DF&#34;,&#34;#5EA1CB&#34;,&#34;#6EACD1&#34;,&#34;#88BEDA&#34;,&#34;#053061&#34;,&#34;#3E8BBF&#34;,&#34;#A8D0E4&#34;,&#34;#3279B6&#34;,&#34;#C9E1EE&#34;,&#34;#EFF3F5&#34;,&#34;#053061&#34;,&#34;#F7F7F7&#34;,&#34;#519AC7&#34;,&#34;#4996C5&#34;,&#34;#8EC2DC&#34;,&#34;#94C6DE&#34;,&#34;#357EB8&#34;,&#34;#4393C3&#34;,&#34;#76B1D3&#34;,&#34;#347CB8&#34;,&#34;#408FC1&#34;,&#34;#053061&#34;,&#34;#7AB4D5&#34;,&#34;#053061&#34;,&#34;#67001F&#34;,&#34;#357EB8&#34;,&#34;#3E8BBF&#34;,&#34;#053061&#34;,&#34;#7FB7D7&#34;,&#34;#3279B6&#34;,&#34;#4393C3&#34;,&#34;#053061&#34;,&#34;#1E61A5&#34;,&#34;#154F8C&#34;,&#34;#6EACD1&#34;,&#34;#E7EFF4&#34;,&#34;#7FB7D7&#34;,&#34;#A3CDE3&#34;,&#34;#6EACD1&#34;,&#34;#17518F&#34;,&#34;#1E61A5&#34;,&#34;#B9D8E9&#34;,&#34;#3D89BE&#34;,&#34;#94C6DF&#34;,&#34;#8FC3DD&#34;,&#34;#1E61A5&#34;,&#34;#3E8BBF&#34;,&#34;#B7D7E8&#34;,&#34;#053061&#34;,&#34;#64A6CD&#34;,&#34;#357DB8&#34;,&#34;#529BC7&#34;,&#34;#A8D0E4&#34;,&#34;#418FC1&#34;,&#34;#BEDBEA&#34;,&#34;#67001F&#34;,&#34;#3E8BBF&#34;,&#34;#5DA1CB&#34;,&#34;#8DC1DC&#34;,&#34;#134A86&#34;,&#34;#4A96C5&#34;,&#34;#C2DDEC&#34;,&#34;#3984BB&#34;,&#34;#579EC9&#34;,&#34;#4291C2&#34;,&#34;#3178B5&#34;,&#34;#3B86BD&#34;,&#34;#1E61A5&#34;,&#34;#3279B6&#34;,&#34;#286DB0&#34;,&#34;#3E8BBF&#34;],&#34;fillOpacity&#34;:0.7},null,null,null,null,null,{&#34;interactive&#34;:false,&#34;permanent&#34;:false,&#34;direction&#34;:&#34;auto&#34;,&#34;opacity&#34;:1,&#34;offset&#34;:[0,0],&#34;textsize&#34;:&#34;10px&#34;,&#34;textOnly&#34;:false,&#34;className&#34;:&#34;&#34;,&#34;sticky&#34;:true},null]},{&#34;method&#34;:&#34;addCircleMarkers&#34;,&#34;args&#34;:[[40.764,40.766,40.766,40.766,40.766,40.768,40.768,40.768,40.768,40.768,40.768,40.768,40.77,40.77,40.77,40.77,40.77,40.77,40.77,40.772,40.772,40.772,40.772,40.772,40.772,40.772,40.774,40.774,40.774,40.774,40.774,40.774,40.774,40.776,40.776,40.776,40.776,40.776,40.776,40.776,40.778,40.778,40.778,40.778,40.778,40.778,40.78,40.78,40.78,40.78,40.78,40.78,40.78,40.782,40.782,40.782,40.782,40.782,40.782,40.782,40.784,40.784,40.784,40.784,40.784,40.784,40.786,40.786,40.786,40.788,40.788,40.788,40.788,40.788,40.788,40.788,40.79,40.79,40.79,40.79,40.79,40.79,40.79,40.792,40.792,40.792,40.792,40.792,40.792,40.792,40.794,40.794,40.794,40.794,40.794,40.794,40.794,40.794,40.796,40.796,40.796,40.796,40.796,40.796,40.796,40.798,40.798,40.798,40.798,40.798,40.798,40.8,40.8],[-73.974,-73.978,-73.976,-73.974,-73.972,-73.982,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.966,-73.976,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.962,-73.972,-73.97,-73.968,-73.966,-73.964,-73.962,-73.96,-73.97,-73.968,-73.966,-73.964,-73.96,-73.958,-73.97,-73.968,-73.958,-73.968,-73.966,-73.964,-73.962,-73.96,-73.958,-73.956,-73.966,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.958,-73.956],6,null,&#34;Climbing&#34;,{&#34;interactive&#34;:true,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:false,&#34;color&#34;:[&#34;#F7F7F7&#34;,&#34;#539BC8&#34;,&#34;#418FC1&#34;,&#34;#3F8CC0&#34;,&#34;#4996C5&#34;,&#34;#3984BB&#34;,&#34;#337AB7&#34;,&#34;#3780BA&#34;,&#34;#71AED2&#34;,&#34;#579EC9&#34;,&#34;#357EB8&#34;,&#34;#3984BB&#34;,&#34;#408DC0&#34;,&#34;#74B0D3&#34;,&#34;#579EC9&#34;,&#34;#154F8C&#34;,&#34;#2B71B2&#34;,&#34;#2C72B2&#34;,&#34;#DCEAF2&#34;,&#34;#F8B799&#34;,&#34;#D1E5F0&#34;,&#34;#6EACD1&#34;,&#34;#3077B5&#34;,&#34;#519AC7&#34;,&#34;#4E99C6&#34;,&#34;#A0CCE2&#34;,&#34;#E2EDF3&#34;,&#34;#68A8CF&#34;,&#34;#84BBD9&#34;,&#34;#4393C3&#34;,&#34;#3882BA&#34;,&#34;#2D73B3&#34;,&#34;#E68367&#34;,&#34;#1B599A&#34;,&#34;#84BBD9&#34;,&#34;#8EC2DC&#34;,&#34;#195696&#34;,&#34;#72AED2&#34;,&#34;#64A6CD&#34;,&#34;#DCEAF2&#34;,&#34;#7CB5D6&#34;,&#34;#3279B6&#34;,&#34;#4190C2&#34;,&#34;#5EA1CB&#34;,&#34;#F7F7F7&#34;,&#34;#DCEAF2&#34;,&#34;#A8D0E4&#34;,&#34;#5CA0CA&#34;,&#34;#4B97C5&#34;,&#34;#195696&#34;,&#34;#B5D6E8&#34;,&#34;#B1D4E7&#34;,&#34;#053061&#34;,&#34;#E68367&#34;,&#34;#053061&#34;,&#34;#A1CCE2&#34;,&#34;#62A4CD&#34;,&#34;#4C98C6&#34;,&#34;#97C7DF&#34;,&#34;#D1E5F0&#34;,&#34;#76B1D3&#34;,&#34;#2B71B2&#34;,&#34;#C5DFED&#34;,&#34;#A8D0E4&#34;,&#34;#A8D0E4&#34;,&#34;#F7F7F7&#34;,&#34;#053061&#34;,&#34;#5FA2CB&#34;,&#34;#7FB7D7&#34;,&#34;#2B71B2&#34;,&#34;#BBD9E9&#34;,&#34;#3279B6&#34;,&#34;#7AB4D5&#34;,&#34;#A8D0E4&#34;,&#34;#FAEAE1&#34;,&#34;#D6E7F1&#34;,&#34;#3984BB&#34;,&#34;#9BCAE1&#34;,&#34;#3E8BBF&#34;,&#34;#65A6CE&#34;,&#34;#6EACD1&#34;,&#34;#F7F7F7&#34;,&#34;#7FB7D7&#34;,&#34;#1C5D9F&#34;,&#34;#6EACD1&#34;,&#34;#7FB7D7&#34;,&#34;#3F8CC0&#34;,&#34;#BBD9E9&#34;,&#34;#5CA0CA&#34;,&#34;#3279B6&#34;,&#34;#053061&#34;,&#34;#77B2D4&#34;,&#34;#68A8CE&#34;,&#34;#408EC1&#34;,&#34;#2A6FB1&#34;,&#34;#2C72B2&#34;,&#34;#3780B9&#34;,&#34;#053061&#34;,&#34;#053061&#34;,&#34;#1D5EA1&#34;,&#34;#4291C2&#34;,&#34;#347CB8&#34;,&#34;#4A96C5&#34;,&#34;#2B71B2&#34;,&#34;#053061&#34;,&#34;#579EC9&#34;,&#34;#65A6CE&#34;,&#34;#3178B5&#34;,&#34;#3B86BD&#34;,&#34;#3E8BBF&#34;,&#34;#3279B6&#34;,&#34;#E9F0F4&#34;,&#34;#7FB7D7&#34;],&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:[&#34;#F7F7F7&#34;,&#34;#539BC8&#34;,&#34;#418FC1&#34;,&#34;#3F8CC0&#34;,&#34;#4996C5&#34;,&#34;#3984BB&#34;,&#34;#337AB7&#34;,&#34;#3780BA&#34;,&#34;#71AED2&#34;,&#34;#579EC9&#34;,&#34;#357EB8&#34;,&#34;#3984BB&#34;,&#34;#408DC0&#34;,&#34;#74B0D3&#34;,&#34;#579EC9&#34;,&#34;#154F8C&#34;,&#34;#2B71B2&#34;,&#34;#2C72B2&#34;,&#34;#DCEAF2&#34;,&#34;#F8B799&#34;,&#34;#D1E5F0&#34;,&#34;#6EACD1&#34;,&#34;#3077B5&#34;,&#34;#519AC7&#34;,&#34;#4E99C6&#34;,&#34;#A0CCE2&#34;,&#34;#E2EDF3&#34;,&#34;#68A8CF&#34;,&#34;#84BBD9&#34;,&#34;#4393C3&#34;,&#34;#3882BA&#34;,&#34;#2D73B3&#34;,&#34;#E68367&#34;,&#34;#1B599A&#34;,&#34;#84BBD9&#34;,&#34;#8EC2DC&#34;,&#34;#195696&#34;,&#34;#72AED2&#34;,&#34;#64A6CD&#34;,&#34;#DCEAF2&#34;,&#34;#7CB5D6&#34;,&#34;#3279B6&#34;,&#34;#4190C2&#34;,&#34;#5EA1CB&#34;,&#34;#F7F7F7&#34;,&#34;#DCEAF2&#34;,&#34;#A8D0E4&#34;,&#34;#5CA0CA&#34;,&#34;#4B97C5&#34;,&#34;#195696&#34;,&#34;#B5D6E8&#34;,&#34;#B1D4E7&#34;,&#34;#053061&#34;,&#34;#E68367&#34;,&#34;#053061&#34;,&#34;#A1CCE2&#34;,&#34;#62A4CD&#34;,&#34;#4C98C6&#34;,&#34;#97C7DF&#34;,&#34;#D1E5F0&#34;,&#34;#76B1D3&#34;,&#34;#2B71B2&#34;,&#34;#C5DFED&#34;,&#34;#A8D0E4&#34;,&#34;#A8D0E4&#34;,&#34;#F7F7F7&#34;,&#34;#053061&#34;,&#34;#5FA2CB&#34;,&#34;#7FB7D7&#34;,&#34;#2B71B2&#34;,&#34;#BBD9E9&#34;,&#34;#3279B6&#34;,&#34;#7AB4D5&#34;,&#34;#A8D0E4&#34;,&#34;#FAEAE1&#34;,&#34;#D6E7F1&#34;,&#34;#3984BB&#34;,&#34;#9BCAE1&#34;,&#34;#3E8BBF&#34;,&#34;#65A6CE&#34;,&#34;#6EACD1&#34;,&#34;#F7F7F7&#34;,&#34;#7FB7D7&#34;,&#34;#1C5D9F&#34;,&#34;#6EACD1&#34;,&#34;#7FB7D7&#34;,&#34;#3F8CC0&#34;,&#34;#BBD9E9&#34;,&#34;#5CA0CA&#34;,&#34;#3279B6&#34;,&#34;#053061&#34;,&#34;#77B2D4&#34;,&#34;#68A8CE&#34;,&#34;#408EC1&#34;,&#34;#2A6FB1&#34;,&#34;#2C72B2&#34;,&#34;#3780B9&#34;,&#34;#053061&#34;,&#34;#053061&#34;,&#34;#1D5EA1&#34;,&#34;#4291C2&#34;,&#34;#347CB8&#34;,&#34;#4A96C5&#34;,&#34;#2B71B2&#34;,&#34;#053061&#34;,&#34;#579EC9&#34;,&#34;#65A6CE&#34;,&#34;#3178B5&#34;,&#34;#3B86BD&#34;,&#34;#3E8BBF&#34;,&#34;#3279B6&#34;,&#34;#E9F0F4&#34;,&#34;#7FB7D7&#34;],&#34;fillOpacity&#34;:0.7},null,null,null,null,null,{&#34;interactive&#34;:false,&#34;permanent&#34;:false,&#34;direction&#34;:&#34;auto&#34;,&#34;opacity&#34;:1,&#34;offset&#34;:[0,0],&#34;textsize&#34;:&#34;10px&#34;,&#34;textOnly&#34;:false,&#34;className&#34;:&#34;&#34;,&#34;sticky&#34;:true},null]},{&#34;method&#34;:&#34;addCircleMarkers&#34;,&#34;args&#34;:[[40.764,40.766,40.766,40.766,40.766,40.768,40.768,40.768,40.768,40.768,40.768,40.768,40.77,40.77,40.77,40.77,40.77,40.77,40.77,40.772,40.772,40.772,40.772,40.772,40.772,40.772,40.774,40.774,40.774,40.774,40.774,40.774,40.774,40.776,40.776,40.776,40.776,40.776,40.776,40.776,40.778,40.778,40.778,40.778,40.778,40.778,40.78,40.78,40.78,40.78,40.78,40.78,40.78,40.782,40.782,40.782,40.782,40.782,40.782,40.782,40.784,40.784,40.784,40.784,40.784,40.784,40.786,40.786,40.786,40.788,40.788,40.788,40.788,40.788,40.788,40.788,40.79,40.79,40.79,40.79,40.79,40.79,40.79,40.792,40.792,40.792,40.792,40.792,40.792,40.792,40.794,40.794,40.794,40.794,40.794,40.794,40.794,40.794,40.796,40.796,40.796,40.796,40.796,40.796,40.796,40.798,40.798,40.798,40.798,40.798,40.798,40.8,40.8],[-73.974,-73.978,-73.976,-73.974,-73.972,-73.982,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.98,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.978,-73.976,-73.974,-73.972,-73.97,-73.968,-73.966,-73.976,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.974,-73.972,-73.97,-73.968,-73.966,-73.964,-73.962,-73.972,-73.97,-73.968,-73.966,-73.964,-73.962,-73.96,-73.97,-73.968,-73.966,-73.964,-73.96,-73.958,-73.97,-73.968,-73.958,-73.968,-73.966,-73.964,-73.962,-73.96,-73.958,-73.956,-73.966,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.964,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.962,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.96,-73.958,-73.956,-73.954,-73.952,-73.95,-73.958,-73.956],6,null,&#34;Running&#34;,{&#34;interactive&#34;:true,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:false,&#34;color&#34;:[&#34;#F7F7F7&#34;,&#34;#2D73B3&#34;,&#34;#5FA2CB&#34;,&#34;#3F8CC0&#34;,&#34;#79B3D4&#34;,&#34;#A8D0E4&#34;,&#34;#3D8ABE&#34;,&#34;#ACD2E5&#34;,&#34;#64A6CD&#34;,&#34;#3077B5&#34;,&#34;#C8E0ED&#34;,&#34;#D7E8F1&#34;,&#34;#367FB9&#34;,&#34;#B5D6E8&#34;,&#34;#3F8CC0&#34;,&#34;#79B3D4&#34;,&#34;#8CC1DC&#34;,&#34;#4E98C6&#34;,&#34;#88BEDA&#34;,&#34;#053061&#34;,&#34;#4393C3&#34;,&#34;#85BBD9&#34;,&#34;#6EACD1&#34;,&#34;#296EB0&#34;,&#34;#3B87BD&#34;,&#34;#88BEDA&#34;,&#34;#F8B799&#34;,&#34;#73AFD2&#34;,&#34;#296FB1&#34;,&#34;#4393C3&#34;,&#34;#408EC1&#34;,&#34;#2064A9&#34;,&#34;#F7F7F7&#34;,&#34;#C8E0ED&#34;,&#34;#66A7CE&#34;,&#34;#529BC7&#34;,&#34;#3984BB&#34;,&#34;#ACD2E5&#34;,&#34;#A8D0E4&#34;,&#34;#3279B6&#34;,&#34;#357EB8&#34;,&#34;#519AC7&#34;,&#34;#4190C2&#34;,&#34;#77B2D4&#34;,&#34;#F7F7F7&#34;,&#34;#408FC1&#34;,&#34;#053061&#34;,&#34;#3E8BBF&#34;,&#34;#6EACD1&#34;,&#34;#B7D7E8&#34;,&#34;#4190C2&#34;,&#34;#539BC8&#34;,&#34;#053061&#34;,&#34;#6EACD1&#34;,&#34;#3D89BE&#34;,&#34;#C6DFED&#34;,&#34;#154F8C&#34;,&#34;#3F8DC0&#34;,&#34;#5FA2CB&#34;,&#34;#D1E5F0&#34;,&#34;#2D73B3&#34;,&#34;#6EACD1&#34;,&#34;#408FC1&#34;,&#34;#A8D0E4&#34;,&#34;#2E75B4&#34;,&#34;#053061&#34;,&#34;#053061&#34;,&#34;#E9F0F4&#34;,&#34;#BBD9E9&#34;,&#34;#053061&#34;,&#34;#7FB7D7&#34;,&#34;#DCEAF2&#34;,&#34;#2E75B4&#34;,&#34;#053061&#34;,&#34;#3E8BBF&#34;,&#34;#3C88BE&#34;,&#34;#6EACD1&#34;,&#34;#88BEDA&#34;,&#34;#7FB7D7&#34;,&#34;#2D73B3&#34;,&#34;#88BEDA&#34;,&#34;#17518F&#34;,&#34;#5CA0CA&#34;,&#34;#4190C2&#34;,&#34;#519AC7&#34;,&#34;#68A8CE&#34;,&#34;#3F8CC0&#34;,&#34;#BBD9E9&#34;,&#34;#5CA0CA&#34;,&#34;#519AC7&#34;,&#34;#053061&#34;,&#34;#DCEAF2&#34;,&#34;#68A8CE&#34;,&#34;#2F76B4&#34;,&#34;#68A8CE&#34;,&#34;#4F99C6&#34;,&#34;#2368AD&#34;,&#34;#053061&#34;,&#34;#BBD9E9&#34;,&#34;#C0DCEB&#34;,&#34;#9DCAE1&#34;,&#34;#6EACD1&#34;,&#34;#E4EEF3&#34;,&#34;#C2DDEC&#34;,&#34;#F8B799&#34;,&#34;#579EC9&#34;,&#34;#3C87BD&#34;,&#34;#E8F0F4&#34;,&#34;#81B9D7&#34;,&#34;#E6EFF4&#34;,&#34;#DCEAF2&#34;,&#34;#E9F0F4&#34;,&#34;#053061&#34;],&#34;weight&#34;:5,&#34;opacity&#34;:0.5,&#34;fill&#34;:true,&#34;fillColor&#34;:[&#34;#F7F7F7&#34;,&#34;#2D73B3&#34;,&#34;#5FA2CB&#34;,&#34;#3F8CC0&#34;,&#34;#79B3D4&#34;,&#34;#A8D0E4&#34;,&#34;#3D8ABE&#34;,&#34;#ACD2E5&#34;,&#34;#64A6CD&#34;,&#34;#3077B5&#34;,&#34;#C8E0ED&#34;,&#34;#D7E8F1&#34;,&#34;#367FB9&#34;,&#34;#B5D6E8&#34;,&#34;#3F8CC0&#34;,&#34;#79B3D4&#34;,&#34;#8CC1DC&#34;,&#34;#4E98C6&#34;,&#34;#88BEDA&#34;,&#34;#053061&#34;,&#34;#4393C3&#34;,&#34;#85BBD9&#34;,&#34;#6EACD1&#34;,&#34;#296EB0&#34;,&#34;#3B87BD&#34;,&#34;#88BEDA&#34;,&#34;#F8B799&#34;,&#34;#73AFD2&#34;,&#34;#296FB1&#34;,&#34;#4393C3&#34;,&#34;#408EC1&#34;,&#34;#2064A9&#34;,&#34;#F7F7F7&#34;,&#34;#C8E0ED&#34;,&#34;#66A7CE&#34;,&#34;#529BC7&#34;,&#34;#3984BB&#34;,&#34;#ACD2E5&#34;,&#34;#A8D0E4&#34;,&#34;#3279B6&#34;,&#34;#357EB8&#34;,&#34;#519AC7&#34;,&#34;#4190C2&#34;,&#34;#77B2D4&#34;,&#34;#F7F7F7&#34;,&#34;#408FC1&#34;,&#34;#053061&#34;,&#34;#3E8BBF&#34;,&#34;#6EACD1&#34;,&#34;#B7D7E8&#34;,&#34;#4190C2&#34;,&#34;#539BC8&#34;,&#34;#053061&#34;,&#34;#6EACD1&#34;,&#34;#3D89BE&#34;,&#34;#C6DFED&#34;,&#34;#154F8C&#34;,&#34;#3F8DC0&#34;,&#34;#5FA2CB&#34;,&#34;#D1E5F0&#34;,&#34;#2D73B3&#34;,&#34;#6EACD1&#34;,&#34;#408FC1&#34;,&#34;#A8D0E4&#34;,&#34;#2E75B4&#34;,&#34;#053061&#34;,&#34;#053061&#34;,&#34;#E9F0F4&#34;,&#34;#BBD9E9&#34;,&#34;#053061&#34;,&#34;#7FB7D7&#34;,&#34;#DCEAF2&#34;,&#34;#2E75B4&#34;,&#34;#053061&#34;,&#34;#3E8BBF&#34;,&#34;#3C88BE&#34;,&#34;#6EACD1&#34;,&#34;#88BEDA&#34;,&#34;#7FB7D7&#34;,&#34;#2D73B3&#34;,&#34;#88BEDA&#34;,&#34;#17518F&#34;,&#34;#5CA0CA&#34;,&#34;#4190C2&#34;,&#34;#519AC7&#34;,&#34;#68A8CE&#34;,&#34;#3F8CC0&#34;,&#34;#BBD9E9&#34;,&#34;#5CA0CA&#34;,&#34;#519AC7&#34;,&#34;#053061&#34;,&#34;#DCEAF2&#34;,&#34;#68A8CE&#34;,&#34;#2F76B4&#34;,&#34;#68A8CE&#34;,&#34;#4F99C6&#34;,&#34;#2368AD&#34;,&#34;#053061&#34;,&#34;#BBD9E9&#34;,&#34;#C0DCEB&#34;,&#34;#9DCAE1&#34;,&#34;#6EACD1&#34;,&#34;#E4EEF3&#34;,&#34;#C2DDEC&#34;,&#34;#F8B799&#34;,&#34;#579EC9&#34;,&#34;#3C87BD&#34;,&#34;#E8F0F4&#34;,&#34;#81B9D7&#34;,&#34;#E6EFF4&#34;,&#34;#DCEAF2&#34;,&#34;#E9F0F4&#34;,&#34;#053061&#34;],&#34;fillOpacity&#34;:0.7},null,null,null,null,null,{&#34;interactive&#34;:false,&#34;permanent&#34;:false,&#34;direction&#34;:&#34;auto&#34;,&#34;opacity&#34;:1,&#34;offset&#34;:[0,0],&#34;textsize&#34;:&#34;10px&#34;,&#34;textOnly&#34;:false,&#34;className&#34;:&#34;&#34;,&#34;sticky&#34;:true},null]},{&#34;method&#34;:&#34;addLayersControl&#34;,&#34;args&#34;:[[&#34;Eating&#34;,&#34;Climbing&#34;,&#34;Running&#34;],[],{&#34;collapsed&#34;:false,&#34;autoZIndex&#34;:true,&#34;position&#34;:&#34;topright&#34;}]},{&#34;method&#34;:&#34;addLegend&#34;,&#34;args&#34;:[{&#34;colors&#34;:[&#34;#053061 , #053061 0%, #4393C3 20%, #D1E5F0 40%, #FDDBC7 60%, #D6604D 80%, #67001F 100%, #67001F &#34;],&#34;labels&#34;:[&#34;0%&#34;,&#34;20%&#34;,&#34;40%&#34;,&#34;60%&#34;,&#34;80%&#34;,&#34;100%&#34;],&#34;na_color&#34;:null,&#34;na_label&#34;:&#34;NA&#34;,&#34;opacity&#34;:0.5,&#34;position&#34;:&#34;bottomright&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;title&#34;:&#34;Percentage&#34;,&#34;extra&#34;:{&#34;p_1&#34;:0,&#34;p_n&#34;:1},&#34;layerId&#34;:null,&#34;className&#34;:&#34;info legend&#34;,&#34;group&#34;:null}]},{&#34;method&#34;:&#34;addScaleBar&#34;,&#34;args&#34;:[{&#34;maxWidth&#34;:100,&#34;metric&#34;:true,&#34;imperial&#34;:true,&#34;updateWhenIdle&#34;:true,&#34;position&#34;:&#34;bottomleft&#34;}]}],&#34;limits&#34;:{&#34;lat&#34;:[40.764,40.8],&#34;lng&#34;:[-73.982,-73.95]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is an interactive map that is fully movable and zoomable, provided you are connected to the internet. &lt;em&gt;If you aren’t connected to the internet: how did you reach this website? Teach me your dark and mysterious skills.&lt;/em&gt; Speaking of dark: I chose a dark background map because I like the way it contrasts with the colours of the circles. Looks especially sweet in dark mode. Click on the subgroups in the upper right corner to see the spatial distributions of their percentages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The code is pretty self explanatory, and I will save a more detailed exploration of leaflet for a future blog post. The different sub-datasets for each action are added as &lt;code&gt;CircleMarkers&lt;/code&gt; using our &lt;code&gt;èxtract_percentages&lt;/code&gt; function. For the colour-coding we define a diverging palette. Each dataset is a layer with a &lt;code&gt;group&lt;/code&gt; attribute which is used to define the switch between them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Among the things we see in the data, there is a tendency for sightings of squirrels eating to be located in the inner part of the park vs the edges. A lot of climbing happens on the east side; and there’s more running in the north. &lt;em&gt;Feel free to supply fitting stereotypes or jokes about Manhattan here - I’m blissfully unaware of any.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For a more serious analysis there would the caveat that some of the spatial bins will have small numbers of squirrels overall, which leads to large uncertainties for those percentages. This is something that would need to be taken into account in a deeper analysis.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Read the &lt;a href=&#34;https://www.tidyverse.org/articles/2019/06/rlang-0-4-0/&#34;&gt;announcement for curly-curly&lt;/a&gt; and the &lt;a href=&#34;https://tidyr.tidyverse.org/articles/pivot.html&#34;&gt;new pivoting vignette&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the moment, situations where one or more variables are simply quoted are the best use cases for &lt;code&gt;{{ }}&lt;/code&gt;. Beyond that, &lt;a href=&#34;https://stackoverflow.com/questions/56936372/curly-curly-tidy-evaluation-and-modifying-inputs-or-their-names&#34;&gt;operations that require modification of variables&lt;/a&gt; still need &lt;code&gt;enquo&lt;/code&gt;. This might &lt;a href=&#34;http://rpubs.com/lionel-/superstache&#34;&gt;change in the near future&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A great introduction to the capabilities of leaflet can be found &lt;a href=&#34;https://rstudio.github.io/leaflet/&#34;&gt;here&lt;/a&gt;. It is also a popular tool for exploratory Kernels on Kaggle, for instance on &lt;a href=&#34;https://www.kaggle.com/headsortails/be-my-guest-recruit-restaurant-eda&#34;&gt;restaurants in Japan&lt;/a&gt; or &lt;a href=&#34;https://www.kaggle.com/headsortails/nyc-taxi-eda-update-the-fast-the-curious&#34;&gt;Taxi rides in NYC&lt;/a&gt; (&lt;em&gt;for an unknown number of squirrel passengers&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As you might expect, Tidy Tuesday is a weekly challenge with tons of interesting data and many talented participants. Make sure to check out #tidytuesday on Twitter for frequent examples of creative visuals.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>

    <item>
      <title>The best of both worlds: R meets Python via reticulate</title>
      <link>https://heads0rtai1s.github.io/2019/10/03/reticulate-intro/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate>

      <guid>https://heads0rtai1s.github.io/2019/10/03/reticulate-intro/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;em&gt;As far as rivalries go, R vs Python can almost reach the levels of the glory days of Barca vs Madrid, Stones vs Beatles, or Sega vs Nintendo. Almost. Just dare to venture onto Twitter asking which language is best for data science to witness two tightly entrenched camps.&lt;/em&gt; Or at least that’s what seemingly hundreds of Medium articles would like you believe. In reality, beyond some good-natured and occasionally entertaining joshing, the whole debate is rather silly. Because the question itself is wrong. It’s the whole &lt;em&gt;“My kung fu is better than your kung fu”&lt;/em&gt; mindset that completely misses the point.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Because what matters the most is choosing the best tool for the specific job.&lt;/strong&gt; Data challenges can be so diverse that no single language could possibly be best suited to solve them all. It’s like the &lt;a href=&#34;https://en.wikipedia.org/wiki/No_free_lunch_theorem&#34;&gt;no-free-lunch theorem&lt;/a&gt;, only for the tools that build those lunch tools. &lt;em&gt;Which makes it the no-free-kitchen theorem, I suppose … . I shall be working on this analogy.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I argue that data analysis needs to be problem-centric and language-agnostic to tap into its full potential.&lt;/strong&gt; Use whatever language gives you the best equipment to solve your problem. This also prevents you from only having a hammer and treating every problem like a nail. One recent development toward a problem-centric analysis style is the fantastic R package &lt;a href=&#34;https://rstudio.github.io/reticulate/&#34;&gt;reticulate&lt;/a&gt;. This package allows you to mix R and Python code in your data analysis, and to freely pass data between the two languages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The topic of this blog post will be an introductory example on how to use reticulate.&lt;/strong&gt; We will approach a simple supervised classification problem by first exploring the data with &lt;a href=&#34;https://cran.r-project.org/web/packages/ggplot2/index.html&#34;&gt;ggplot2&lt;/a&gt; plots, then turn to Python’s &lt;a href=&#34;https://scikit-learn.org/stable/&#34;&gt;scikit-learn&lt;/a&gt; for modelling, and finally visualise the results again in R.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: you need at least RStudio version 1.2 to be able to pass objects between R and Python.&lt;/strong&gt; In addition, as always, here are the required packages:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;libs &amp;lt;- c(&amp;#39;dplyr&amp;#39;, &amp;#39;tidyr&amp;#39;, &amp;#39;stringr&amp;#39;,  # wrangling
          &amp;#39;knitr&amp;#39;,&amp;#39;kableExtra&amp;#39;,         # table styling
          &amp;#39;ggplot2&amp;#39;,&amp;#39;gridExtra&amp;#39;,        # plots
          &amp;#39;viridis&amp;#39;,                    # visuals styling
          &amp;#39;reticulate&amp;#39;)                 # e pluribus unum
invisible(lapply(libs, library, character.only = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll be using the famous &lt;a href=&#34;https://en.wikipedia.org/wiki/Iris_flower_data_set&#34;&gt;iris dataset&lt;/a&gt;, which is included in R as part of the &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html&#34;&gt;datasets&lt;/a&gt; package. Arguably the Hello World of supervised classification problems, this data describes the length and widths of sepals and petals from 3 different species of iris flower. Sepals are the green parts of a flower that first protect and then support the petals. Just in case you too were wondering that. Here are the first couple rows of the data:&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Sepal.Length
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Sepal.Width
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Petal.Length
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Petal.Width
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Species
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.2
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
setosa
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.2
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
setosa
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.2
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
setosa
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.2
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
setosa
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This is a small dataset with 50 instances each per species of iris flower:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;iris %&amp;gt;%
  count(Species)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   Species        n
##   &amp;lt;fct&amp;gt;      &amp;lt;int&amp;gt;
## 1 setosa        50
## 2 versicolor    50
## 3 virginica     50&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a simple example for exploratory data analysis plots we will look at the differences between those 3 species in terms of petal and sepal dimensions. Here, the &lt;a href=&#34;https://cran.r-project.org/web/packages/gridExtra/index.html&#34;&gt;gridExtra&lt;/a&gt; package provides the side-by-side layout:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- iris %&amp;gt;%
  ggplot(aes(Petal.Length, Petal.Width, color = Species)) +
  geom_point(size = 4) +
  labs(x = &amp;quot;Petal Length&amp;quot;, y = &amp;quot;Petal Width&amp;quot;) +
  scale_color_viridis(discrete = TRUE, option = &amp;quot;viridis&amp;quot;) +
  theme_bw() +
  theme(legend.position = &amp;quot;none&amp;quot;) +
  ggtitle(&amp;quot;Differences in Iris Species&amp;quot;,
          subtitle = str_c(&amp;quot;Petal and Sepal dimensions vary&amp;quot;,
                           &amp;quot;\n&amp;quot;,
                           &amp;quot;significantly between species&amp;quot;))

p2 &amp;lt;- iris %&amp;gt;%
  ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
  geom_point(size = 4) +
  labs(x = &amp;quot;Sepal Length&amp;quot;, y = &amp;quot;Sepal Width&amp;quot;) +
  scale_color_viridis(discrete = TRUE, option = &amp;quot;viridis&amp;quot;) +
  theme_bw() +
  theme(legend.position = &amp;quot;top&amp;quot;)

grid.arrange(p1, p2, layout_matrix = rbind(c(1,2)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-03-reticulate-intro_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We find that there are clear clusters for each of the species - especially for setosa and in the petal dimensions. A well-trained classifier should be able to distinguish the three iris species. Now, R is perfectly capable of performing this classification task, but for the sake of the excercise we will turn to Python. Given the popularity of both &lt;code&gt;ggplot2&lt;/code&gt; and &lt;code&gt;scikit-learn&lt;/code&gt;, such a workflow is certainly realistic.&lt;/p&gt;
&lt;p&gt;First, we need to tell R where Python can be found. In &lt;code&gt;reticulate&lt;/code&gt;, the &lt;code&gt;use_python&lt;/code&gt; convenience function takes care of that; all we need is a path to the executable. On a Unix-based system, simply open a terminal and type &lt;code&gt;which python&lt;/code&gt;, then paste the resulting path below. (Or look for &lt;code&gt;python3&lt;/code&gt; instead, but this should really become your default version because for Python 2 the &lt;a href=&#34;https://pythonclock.org&#34;&gt;time is running out&lt;/a&gt;). This is my path:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;use_python(&amp;quot;/usr/bin/python&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you have the combined power of both R and Python at our fingertips. Use it wisely. In Rmarkdown, you can switch each invidual code chunk to the new language by putting &lt;code&gt;{python}&lt;/code&gt; instead of &lt;code&gt;{r}&lt;/code&gt; into the chunk header.&lt;/p&gt;
&lt;p&gt;So, what’s the easiest way to find out that you’re in Python? You suddenly find yourself starting to count from zero:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;foo = [1, 2, 3]
print(foo[0])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The real advantage, however, is that we can now pass objects from R to Python, and vice versa. To use R objects in Python we access them using the &lt;code&gt;r&lt;/code&gt; object and Python’s &lt;code&gt;.&lt;/code&gt; (dot) notation. For instance, our &lt;code&gt;iris&lt;/code&gt; dataset will be represented by &lt;code&gt;r.iris&lt;/code&gt;, which is a &lt;code&gt;pandas&lt;/code&gt; data frame:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(r.iris.loc[:5, [&amp;quot;Sepal.Length&amp;quot;, &amp;quot;Species&amp;quot;]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Sepal.Length Species
## 0           5.1  setosa
## 1           4.9  setosa
## 2           4.7  setosa
## 3           4.6  setosa
## 4           5.0  setosa
## 5           5.4  setosa&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s prepare a simple &lt;code&gt;scikit-learn&lt;/code&gt; &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html&#34;&gt;decision tree classifier&lt;/a&gt;. First, we import the necessary Python libraries:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import pandas
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we split our iris dataset into train vs test samples using the &lt;code&gt;train_test_split&lt;/code&gt; convenience method. Of course, in real life you want to do the train/test split before looking at the data. For the sake of clarity, we choose to explicitely separate out the predictor features vs the species labels:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;train, test = train_test_split(r.iris,
                test_size = 0.4, random_state = 4321)

X = train.drop(&amp;#39;Species&amp;#39;, axis = 1)
y = train.loc[:, &amp;#39;Species&amp;#39;].values
X_test = test.drop(&amp;#39;Species&amp;#39;, axis = 1)
y_test = test.loc[:, &amp;#39;Species&amp;#39;].values&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those are now Python objects. In order to see and handle them in R you have to use the &lt;code&gt;py$&lt;/code&gt; object. This is the equivalent of the &lt;code&gt;r.&lt;/code&gt; object for working with R variables in Python. For example, because &lt;code&gt;X&lt;/code&gt; is a Python object this R code doesn’t work:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;X %&amp;gt;% head(5)  # doesn&amp;#39;t work&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this R code does the trick:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;py$X %&amp;gt;% head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Sepal.Length Sepal.Width Petal.Length Petal.Width
## 41          4.5         2.3          1.3         0.3
## 16          5.4         3.9          1.3         0.4
## 26          5.0         3.4          1.6         0.4
## 99          5.7         2.8          4.1         1.3
## 5           5.4         3.9          1.7         0.4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s switch back to Python code. We wil fit a simple decision tree with &lt;code&gt;sklearn&lt;/code&gt;, apply it to the test set, and visualise the results in R.&lt;/p&gt;
&lt;p&gt;First the fit and prediction. One major advantage of &lt;code&gt;sklearn&lt;/code&gt; is its intuitive and consistent syntax:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tree = DecisionTreeClassifier(random_state=4321)
clf = tree.fit(X, y)
pred = clf.predict(X_test)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we bring the test predictions back to R and plot some results.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;foo &amp;lt;- py$test %&amp;gt;%
  as_tibble() %&amp;gt;%
  rename(truth = Species) %&amp;gt;%
  mutate(predicted = as.factor(py$pred),
         correct = (truth == predicted))

foo %&amp;gt;%
  head(4) %&amp;gt;%
  select(-Petal.Length, -Petal.Width) %&amp;gt;%
  kable() %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Sepal.Length
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Sepal.Width
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
truth
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
predicted
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
correct
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.4
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
setosa
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
setosa
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.3
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
setosa
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
setosa
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.2
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
versicolor
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
virginica
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.3
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
virginica
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
virginica
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1  &amp;lt;- foo %&amp;gt;%
  select(-correct) %&amp;gt;%
  gather(truth, predicted, key = type, value = species) %&amp;gt;%
  ggplot(aes(Petal.Length, Petal.Width, color = species)) +
  geom_point(data = foo %&amp;gt;% filter(correct == FALSE),
             col = &amp;quot;black&amp;quot;, size = 5) +
  geom_point(size = 2) +
  scale_color_viridis(discrete = TRUE, option = &amp;quot;viridis&amp;quot;) +
  theme_bw() +
  theme(legend.position = &amp;quot;none&amp;quot;,
        text = element_text(size = 16)) +
  facet_wrap(~ type)

p2 &amp;lt;- foo %&amp;gt;%
  select(-correct) %&amp;gt;%
  gather(truth, predicted, key = type, value = species) %&amp;gt;%
  ggplot(aes(Sepal.Length, Sepal.Width, color = species)) +
  geom_point(data = foo %&amp;gt;%
               filter(correct == FALSE),
             col = &amp;quot;black&amp;quot;, size = 5) +
  geom_point(size = 2) +
  scale_color_viridis(discrete = TRUE, option = &amp;quot;viridis&amp;quot;,
              guide = guide_legend(direction = &amp;quot;vertical&amp;quot;)) +
  labs(color = &amp;quot;Species&amp;quot;) +
  theme_bw() +
  theme(legend.position = &amp;quot;bottom&amp;quot;,
        text = element_text(size = 16)) +
  facet_wrap(~ type)

p3 &amp;lt;- foo %&amp;gt;%
  count(truth, predicted) %&amp;gt;%
  complete(truth, predicted, fill = list(n = 0)) %&amp;gt;%
  group_by(truth) %&amp;gt;%
  add_tally(n, name = &amp;quot;true&amp;quot;) %&amp;gt;%
  mutate(accuracy = n/true * 100) %&amp;gt;%
  ggplot(aes(truth, predicted, fill = accuracy, label = n)) +
  geom_tile() +
  geom_text(size = 5, color = &amp;quot;grey60&amp;quot;) +
  labs(x = &amp;quot;True Species&amp;quot;, y = &amp;quot;Predicted Species&amp;quot;,
       fill = &amp;quot;Accuracy[%]&amp;quot;) +
  theme_minimal() +
  theme(legend.position = &amp;quot;bottom&amp;quot;,
        text = element_text(size = 16),
        axis.text.x = element_text(
          angle=45, hjust=1, vjust=1.1),
        axis.text.y = element_text(
          angle = 45)) +
  scale_fill_viridis(option = &amp;quot;viridis&amp;quot;) +
  ggtitle(&amp;quot;Classification\nDiagnostics&amp;quot;,
          subtitle = str_c(&amp;quot;Left: confusion matrix&amp;quot;,
            &amp;quot;\n&amp;quot;,
            &amp;quot;Right: misclassified\ninstances&amp;quot;))

grid.arrange(p1, p2, p3,
        layout_matrix = cbind(c(3), c(rep(1,2), rep(2,3))))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-03-reticulate-intro_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This plot layout provides diagnostics for the performance of the classifier:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On the left, there is a confusion matrix which shows how many test instances of each species were classified as one of the 3 species. The numbers are absolute numbers (remember that this is a small dataset) and the colours encode percentages. For instance, 100% of the 19 setosa instances were correctly classified as setosa. This is the classification accuracy, i.e. the number of true positives. The accuracies for the other two species are pretty high, too; with iris virginica having the lowest proportion of 20 out of 24 instances correctly classified.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the right we show two sets of scatter plots that repeat the overview of petal (top) and sepal (bottom) properties from above. The difference is that now we (i) look at the test set only and (ii) plot the true classes on the right and the predicted classes on the left. The colour-coding is the same for both scatter plots (see legend at the bottom). In addition, all the misclassified instances have a black circle around them to highlight their position.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in all, our simple classifier does a decent job. The setosas are clearly separated from the rest. And disentangling versicolor vs virginica is not trivial. Of course the performance could be improved, but this is not the topic of this post.&lt;/p&gt;
&lt;p&gt;Because more importantly we saw how the &lt;code&gt;reticulate&lt;/code&gt; approach allows us to seamlessly blend together R and Python code to use the combined power of both worlds.&lt;/p&gt;
&lt;p&gt;So, the next time somebody asks you “Python or R?” just reply with a simple “Yes.” (#inclusiveor).&lt;/p&gt;
&lt;p&gt;More resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For running R code in a Jupyter notebook with Python kernel there is the great &lt;a href=&#34;https://rpy2.bitbucket.io&#34;&gt;rpy2 library&lt;/a&gt; combined with Jupyter’s &lt;a href=&#34;https://ipython.readthedocs.io/en/stable/interactive/magics.html&#34;&gt;line or cell magic&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In R, decision trees are implemented via the &lt;a href=&#34;https://cran.r-project.org/web/packages/rpart/index.html&#34;&gt;rpart package&lt;/a&gt;. For general machine learning infrastructure there are the popular &lt;a href=&#34;https://cran.r-project.org/web/packages/caret/index.html&#34;&gt;caret&lt;/a&gt; and the new &lt;a href=&#34;https://cran.r-project.org/web/packages/tidymodels/index.html&#34;&gt;tidymodels&lt;/a&gt;; both led by developer &lt;a href=&#34;https://github.com/topepo&#34;&gt;Max Kuhn&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For creating visualisations in Python I recommend &lt;a href=&#34;https://seaborn.pydata.org&#34;&gt;seaborn&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>

    <item>
      <title>Tidy evaluation in R: Part 2 - Complex use cases (feat. facet zoom)</title>
      <link>https://heads0rtai1s.github.io/2019/08/22/tidy-eval-examples-part2/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>

      <guid>https://heads0rtai1s.github.io/2019/08/22/tidy-eval-examples-part2/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;In an &lt;a href=&#34;https://heads0rtai1s.github.io/2019/04/24/tidy-eval-examples/&#34;&gt;earlier post&lt;/a&gt; I gave a gentle introduction to &lt;a href=&#34;https://tidyeval.tidyverse.org/&#34;&gt;tidy evaluation&lt;/a&gt; in the R &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt; using simple examples. I covered quoting with &lt;code&gt;enquo&lt;/code&gt; and unquoting with &lt;code&gt;!!&lt;/code&gt; in brief &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;ggplot2&lt;/code&gt; snippets. Today, I aim to build a collection of more complex use cases involving additional tools.&lt;/p&gt;
&lt;p&gt;Those are our libraries:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;libs &amp;lt;- c(&amp;#39;dplyr&amp;#39;, &amp;#39;stringr&amp;#39;,             # wrangling
          &amp;#39;knitr&amp;#39;,&amp;#39;kableExtra&amp;#39;,           # table styling
          &amp;#39;ggplot2&amp;#39;,&amp;#39;ggforce&amp;#39;)            # plots
invisible(lapply(libs, library, character.only = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time, the &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/diamonds.html&#34;&gt;Diamonds dataset&lt;/a&gt; will be our best friend in exploring the depths of tidy eval. Included in the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggplot2/index.html&#34;&gt;ggplot2 package&lt;/a&gt;, this dataset describes the price of 54k diamonds along with their cut, weight, clarity, size, and other relevant properties. Here are the first 4 rows:&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
carat
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
cut
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
color
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
clarity
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
depth
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
table
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
price
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
x
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
y
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
z
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.23
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Ideal
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
E
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
SI2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
61.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
55
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
326
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.95
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.98
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.43
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.21
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Premium
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
E
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
SI1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
61
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
326
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.89
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.84
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.31
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.23
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Good
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
E
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
VS1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
56.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
327
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.07
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.31
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.29
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Premium
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
I
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
VS2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
62.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
58
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
334
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.63
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Meet &lt;code&gt;enqous&lt;/code&gt; and &lt;code&gt;!!!&lt;/code&gt;:&lt;/strong&gt; The equivalent to &lt;code&gt;enquo&lt;/code&gt; for &lt;strong&gt;quoting more than one variable&lt;/strong&gt; is called &lt;code&gt;enquos&lt;/code&gt;. So far, so plural. The corresponding &lt;strong&gt;unquoting&lt;/strong&gt; method is &lt;code&gt;!!!&lt;/code&gt; - the &lt;em&gt;big bang&lt;/em&gt; operator (remember that &lt;code&gt;!!&lt;/code&gt; is &lt;em&gt;bang-bang&lt;/em&gt;). The tidyverse certainly doesn’t shy away from cosmological superlatives. (The &lt;a href=&#34;https://www.rstudio.com/resources/cheatsheets/&#34;&gt;tidyeval cheat sheet&lt;/a&gt; calls it &lt;em&gt;bang-bang-bang&lt;/em&gt;, which makes more intuitive sense but is less poetic; as a trained astronomer my choice is clear.) Here we see both operators in action:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;group_mean &amp;lt;- function(df, g, x, y){

  group_cols &amp;lt;- enquos(x, y)
  mean_col &amp;lt;- enquo(g)
  df %&amp;gt;%
    group_by(!!! group_cols) %&amp;gt;%
    summarise(mean = mean(!! mean_col))
}

group_mean(diamonds, price, cut, color) %&amp;gt;%
  head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
## # Groups:   cut [1]
##   cut   color  mean
##   &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Fair  D     4291.
## 2 Fair  E     3682.
## 3 Fair  F     3827.
## 4 Fair  G     4239.
## 5 Fair  H     5136.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Alternative: use &lt;code&gt;...&lt;/code&gt; aka dots:&lt;/strong&gt; Note, that if all you need to do is group together a bunch of variables (or to treat them as one group in any other way) then R offers the nifty &lt;code&gt;...&lt;/code&gt; operator. You might have seen this style in function definitions or help pages already. With the dots you can capture everything that is not explicitely named and refer to it as one entity. This simplifies our above function in the following way:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;group_mean &amp;lt;- function(df, g, ...){

  mean_col &amp;lt;- enquo(g)
  df %&amp;gt;%
    group_by(...) %&amp;gt;%
    summarise(mean = mean(!! mean_col))
}

group_mean(diamonds, price, cut, color) %&amp;gt;%
  head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
## # Groups:   cut [1]
##   cut   color  mean
##   &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Fair  D     4291.
## 2 Fair  E     3682.
## 3 Fair  F     3827.
## 4 Fair  G     4239.
## 5 Fair  H     5136.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s important to note that &lt;code&gt;!!!&lt;/code&gt; currently doesn’t work in &lt;code&gt;ggplot(aes())&lt;/code&gt;. &lt;a href=&#34;https://stackoverflow.com/questions/55815963/tidyeval-splice-operator-fails-with-ggplots-aes&#34;&gt;There is a workaround&lt;/a&gt; and hopefully soon a fix that I will cover in a future post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;:=&lt;/code&gt; operator:&lt;/strong&gt; to &lt;strong&gt;rename a variable to a quoted name&lt;/strong&gt; you need the &lt;code&gt;:=&lt;/code&gt; operator. Think of it as a maths-style definition if that helps you to remember the syntax. Here’s how it works, giving our mean price variable a custom name:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;group_mean &amp;lt;- function(df, g, n, ...){

  mean_col &amp;lt;- enquo(g)
  new_name &amp;lt;- enquo(n)

  df %&amp;gt;%
    group_by(...) %&amp;gt;%
    summarise(!! new_name := mean(!! mean_col))
}

group_mean(diamonds, price, mean_price, cut, color) %&amp;gt;%
  head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 3
## # Groups:   cut [1]
##   cut   color mean_price
##   &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 Fair  D          4291.
## 2 Fair  E          3682.
## 3 Fair  F          3827.
## 4 Fair  G          4239.
## 5 Fair  H          5136.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This operator becomes more useful in complex functions or when you are writing your own packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encoding strings with &lt;code&gt;ensym&lt;/code&gt;:&lt;/strong&gt; In some scenarios you want to quote your input not as an expression but a symbol. In the context of helper functions this will often involve strings - and a common use case is &lt;code&gt;ggplot2&lt;/code&gt; wrappers. The strings can then be further manipulated for instance with the tidy &lt;a href=&#34;https://cran.r-project.org/web/packages/stringr/vignettes/stringr.html&#34;&gt;&lt;code&gt;stringr&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;In this final example of the post I will showcase the use of &lt;code&gt;ensym&lt;/code&gt; alongside the other main &lt;code&gt;tidyeval&lt;/code&gt; operators. The function will be a &lt;code&gt;ggplot2&lt;/code&gt; convenience wrapper that build a scatter plot of two numerical features colour-coded by a categorical variable. Custom axes labels and plot title will be added. For a little extra flourish, I will add a zoom view on one particular category using the powerful &lt;code&gt;facet_zoom&lt;/code&gt; function from the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggforce/index.html&#34;&gt;&lt;code&gt;ggforce&lt;/code&gt;&lt;/a&gt; package. Here’s what it looks like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_xy &amp;lt;- function(df, x, y, col, var_zoom, ...){

  x &amp;lt;- enquo(x)
  y &amp;lt;- enquo(y)
  col &amp;lt;- enquo(col)
  group_vars &amp;lt;- enquos(...)

  dfname &amp;lt;- ensym(df) %&amp;gt;% str_to_sentence()
  xname &amp;lt;- ensym(x) %&amp;gt;% str_to_sentence()
  yname &amp;lt;- ensym(y) %&amp;gt;% str_to_sentence()
  colname &amp;lt;- ensym(col) %&amp;gt;% str_to_sentence()

  df %&amp;gt;%
    mutate(!! col := as.factor(!! col)) %&amp;gt;%
    group_by(!! col, !!! group_vars) %&amp;gt;%
    summarise(mean_x = mean(!!x),
              mean_y = mean(!!y)) %&amp;gt;%
    ungroup() %&amp;gt;%
    ggplot(aes(mean_x, mean_y, col = !!col)) +
    geom_point() +
    scale_color_brewer(type = &amp;quot;qual&amp;quot;, palette = &amp;quot;Set1&amp;quot;) +
    labs(x = xname, y = yname, col = colname) +
    ggtitle(str_c(dfname, &amp;quot; dataset: &amp;quot;,
                  xname, &amp;quot; vs &amp;quot;, yname,
                  &amp;quot; with colour coding by &amp;quot;, colname),
            subtitle = str_c(&amp;quot;Zoom view to emphasise &amp;quot;,
                             colname, &amp;quot; = &amp;quot;, var_zoom)) +
    facet_zoom(x = (!! col == var_zoom))
}

plot_xy(diamonds, carat, price, clarity, &amp;quot;IF&amp;quot;, color, cut)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-08-22-tidy-eval-complex-examples_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s break it down:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; features are encoded using &lt;code&gt;enquo&lt;/code&gt; and &lt;code&gt;!!&lt;/code&gt;, as covered in the &lt;a href=&#34;https://heads0rtai1s.github.io/2019/04/24/tidy-eval-examples/&#34;&gt;previous post&lt;/a&gt;. Those variables will form our scatter plot. But now, they are also encoded using &lt;code&gt;ensym&lt;/code&gt; as &lt;code&gt;xname&lt;/code&gt; and &lt;code&gt;yname&lt;/code&gt;. Those are symbols that we can now use in string functions to build custom plot titles and labels.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;col&lt;/code&gt; feature is also encoded both as a quote and a symbol. This needs to be a categorical feature that we will use to colour-code the data points. The legend is the default style and position. Note, that we use &lt;code&gt;:=&lt;/code&gt; to preserve the column name when transforming this feature from character to factor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;string_to_sentence&lt;/code&gt; tool, from the &lt;code&gt;stringr&lt;/code&gt; package, simply capitalises our input strings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additional grouping variables are encoded using &lt;code&gt;enquos&lt;/code&gt; and spliced into the &lt;code&gt;group_by&lt;/code&gt; call via &lt;code&gt;!!!&lt;/code&gt;. By using the dots &lt;code&gt;...&lt;/code&gt; in the function call we give ourselves the option to use an arbitrary number of grouping features in this function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What the function does, is to group the data by the grouping variables (here: Color and Cut) plus the colour-coding feature (here: Clarity). Then it computes the group mean for the x and y features (here: Carat and Price). It plots these group means in a colour-coded scatter plot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, it zooms into one particular category of the colour-coding (here: Clarity = “IF”) and provides a magnified view. This zoom view is shown in the lower panel. The upper panel shows the entire data set. Note, that this upper panel has a darker background (and a connecting region) to indicate where the zoom view is located in the overall picture.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The zoom facet is provided by the &lt;code&gt;ggforce&lt;/code&gt; tool &lt;code&gt;facet_zoom&lt;/code&gt; which is very useful for examining specific data points. Here we only zoom into the x-axis, but it can also provide zooms on the y axis or for both axes simultaneously.&lt;/p&gt;
&lt;p&gt;More Resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Rstudio’s excellent &lt;a href=&#34;https://www.rstudio.com/resources/cheatsheets/&#34;&gt;cheats sheets&lt;/a&gt; include a tidyeval specimen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The prolific &lt;a href=&#34;https://community.rstudio.com/&#34;&gt;Rstudio Community&lt;/a&gt; has a tag for &lt;a href=&#34;https://community.rstudio.com/tags/c/tidyverse/tidyeval&#34;&gt;tidyeval questions and solutions&lt;/a&gt;, among many other interesting topics.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>

    <item>
      <title>Data flow visuals - alluvial vs ggalluvial in R</title>
      <link>https://heads0rtai1s.github.io/2019/06/06/visuals-alluvial-ggalluvial/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>

      <guid>https://heads0rtai1s.github.io/2019/06/06/visuals-alluvial-ggalluvial/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I have long been a fan of creative data visualisation techniques. For me, the choice of visual representation is driven by both the type of data and the kind of question one wants to examine.&lt;/p&gt;
&lt;p&gt;The power of its visualisation tools has been a major strength of the R language well before the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggplot2/index.html&#34;&gt;ggplot2&lt;/a&gt; package and the &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt; burst onto the scene. Today’s post will be an introductory examination of two similar packages that allow us to study the connection and &lt;em&gt;flow&lt;/em&gt; of data between different categorical features via &lt;strong&gt;alluvial plots&lt;/strong&gt;. Those packages are &lt;a href=&#34;https://cran.r-project.org/web/packages/alluvial/vignettes/alluvial.html&#34;&gt;alluvial&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/ggalluvial/vignettes/ggalluvial.html&#34;&gt;ggalluvial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All in all we need the following libraries:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;libs &amp;lt;- c(&amp;#39;dplyr&amp;#39;, &amp;#39;stringr&amp;#39;, &amp;#39;forcats&amp;#39;,     # wrangling
          &amp;#39;knitr&amp;#39;,&amp;#39;kableExtra&amp;#39;,               # table styling
          &amp;#39;ggplot2&amp;#39;,&amp;#39;alluvial&amp;#39;,&amp;#39;ggalluvial&amp;#39;,  # plots
          &amp;#39;nycflights13&amp;#39;)                     # data
invisible(lapply(libs, library, character.only = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alluvial plots are best explained by showing one. For illustrating the following examples we will take on board the flights data from the &lt;a href=&#34;https://cran.r-project.org/web/packages/nycflights13/index.html&#34;&gt;nycflights13 library&lt;/a&gt;. This comprehensive data set contains all flights that departed from the New York City airports JFK, LGA, and EWR in 2013. For this analysis, we will only look at three features - the 1st-class features if you will: airport of origin, destination airport, and carrier (i.e. airline code). From the metaphorical front of the cabin, here are the first 4 rows:&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
origin
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
carrier
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
dest
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
EWR
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
UA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
IAH
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
LGA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
UA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
IAH
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
JFK
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
AA
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
MIA
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
JFK
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
B6
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
BQN
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/mbojan/alluvial&#34;&gt;alluvial package&lt;/a&gt; was &lt;a href=&#34;http://bc.bojanorama.pl/2014/03/alluvial-diagrams/&#34;&gt;introduced in 2014&lt;/a&gt; to fill a niché in the landscape of visualisations. I have enjoyed using it in the past in &lt;a href=&#34;https://www.kaggle.com/headsortails/treemap-house-of-horror-spooky-eda-lda-features&#34;&gt;several&lt;/a&gt; &lt;a href=&#34;https://www.kaggle.com/headsortails/nyc-taxi-eda-update-the-fast-the-curious&#34;&gt;Kaggle&lt;/a&gt; &lt;a href=&#34;https://www.kaggle.com/headsortails/steering-wheel-of-fortune-porto-seguro-eda&#34;&gt;Kernels&lt;/a&gt;. Here’s what a plot looks like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top_dest &amp;lt;- flights %&amp;gt;%
  count(dest) %&amp;gt;%
  top_n(5, n) %&amp;gt;%
  pull(dest)

top_carrier &amp;lt;- flights %&amp;gt;%
  filter(dest %in% top_dest) %&amp;gt;%
  count(carrier) %&amp;gt;%
  top_n(4, n) %&amp;gt;%
  pull(carrier)

fly &amp;lt;- flights %&amp;gt;%
  filter(dest %in% top_dest &amp;amp; carrier %in% top_carrier) %&amp;gt;%
  count(origin, carrier, dest) %&amp;gt;%
  mutate(origin = fct_relevel(as.factor(origin), c(&amp;quot;EWR&amp;quot;, &amp;quot;LGA&amp;quot;, &amp;quot;JFK&amp;quot;)))

alluvial(fly %&amp;gt;% select(-n),
         freq=fly$n, border=NA, alpha = 0.5,
         col=case_when(fly$origin == &amp;quot;JFK&amp;quot; ~ &amp;quot;red&amp;quot;,
                       fly$origin == &amp;quot;EWR&amp;quot; ~ &amp;quot;blue&amp;quot;,
                       TRUE ~ &amp;quot;orange&amp;quot;),
         cex=0.75,
         axis_labels = c(&amp;quot;Origin&amp;quot;, &amp;quot;Carrier&amp;quot;, &amp;quot;Destination&amp;quot;),
         hide = fly$n &amp;lt; 150)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-06-06-visuals_alluvial_ggalluvial_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The features are arranged horizontally, with their value counts stacked vertically. This corresponds to a stacked barplot: e.g. for the destinations “BOS” has fewer flights than “LAX”. Here we only look at the top 5 destination and their top 4 carriers (that’s the first two segments of the code above).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The “alluvia” are the bands that connect the features from left to right. Alluvia break down all feature combinations, with complexity increasing also from left to right. These sub-segments are called “flows”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This means that starting from the 3 origin airports on the left there are 4 “flows” each (i.e. 12 in total) connecting to the 4 main carriers. Between carrier and destination these then fan out into 5 flows each for a theoretical total of 60 different flows. In practice, we want to use the &lt;code&gt;hide&lt;/code&gt; parameter to exclude those flows that only have a few observations so that we can focus on the big picture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For further styling, a &lt;code&gt;border&lt;/code&gt; colour can be assigned to each alluvium. This would allow us to distinguish the different flows on the left side that then break into sub-flows on the right side. Feel free to try it out. Personally, I think the plot looks better without border colours.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We chose a colour coding (argument &lt;code&gt;col&lt;/code&gt;) that puts focus on the origin airports. The first argument of the &lt;code&gt;alluvial&lt;/code&gt; function is the data set, followed by the frequency column (&lt;code&gt;freq&lt;/code&gt;). Note that &lt;code&gt;alluvial&lt;/code&gt; expects the data already to be in the shape of grouped counts (as prepared via &lt;code&gt;count&lt;/code&gt; in the third code segment above).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In my view, the best transparency for alluvia is the default &lt;code&gt;alpha = 0.5&lt;/code&gt;. As usual, &lt;code&gt;cex&lt;/code&gt; does the font scaling and &lt;code&gt;axis_lables&lt;/code&gt; is pretty self-explanatory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;alluvial&lt;/code&gt; function has an &lt;code&gt;ordering&lt;/code&gt; parameter, but it’s generally better to do the ordering through factor re-levelling when preparing the data (via the tidyverse &lt;a href=&#34;https://cran.r-project.org/web/packages/forcats/&#34;&gt;forcats library&lt;/a&gt;). Here we only change the order for the &lt;code&gt;origin&lt;/code&gt; feature.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, other than looking pretty, what insights does it give us? Well, for instance we see that (for this subset) EWR is dominated by UA (United Airlines) and has almost no AA (American Airlines flights). In turn, UA flights are not frequent in LGA or JFK. Both Boston (BOS) and Los Angeles (LAX) are not connected to LGA (orange). &lt;strong&gt;Thus, the alluvial plot shows us - pretty literally in this case - the flow of flight volume between airports through airline carriers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now, the &lt;code&gt;alluvial&lt;/code&gt; tool has a rather specific syntax and doesn’t integrate seamlessly with the tidyverse. Enter the &lt;a href=&#34;https://github.com/corybrunson/ggalluvial&#34;&gt;&lt;code&gt;ggalluvial&lt;/code&gt; library&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fly %&amp;gt;%
  mutate(origin = fct_rev(as.factor(origin)),
         carrier = fct_rev(as.factor(carrier)),
         dest = fct_rev(as.factor(dest))) %&amp;gt;%
  filter(n &amp;gt; 150) %&amp;gt;%
  ggplot(aes(y = n, axis1 = origin, axis2 = carrier, axis3 = dest)) +
  geom_alluvium(aes(fill = origin), aes.bind=TRUE, width = 1/12) +
  geom_stratum(width = 1/4, fill = &amp;quot;white&amp;quot;, color = &amp;quot;black&amp;quot;) +
  geom_text(stat = &amp;quot;stratum&amp;quot;, label.strata = TRUE) +
  scale_x_discrete(limits = c(&amp;quot;Origin&amp;quot;, &amp;quot;Carrier&amp;quot;, &amp;quot;Destination&amp;quot;),
                   expand = c(.05, .05)) +
  scale_fill_manual(values = c(&amp;quot;red&amp;quot;, &amp;quot;orange&amp;quot;, &amp;quot;blue&amp;quot;)) +
  labs(y = &amp;quot;Cases&amp;quot;) +
  theme_minimal() +
  theme(legend.position = &amp;quot;none&amp;quot;) +
  ggtitle(&amp;quot;NYC flights volume for top destinations and airlines&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-06-06-visuals_alluvial_ggalluvial_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here I purposefully choose the styling parameters to (broadly) reproduce the above plot. It is evident that &lt;code&gt;ggalluvial&lt;/code&gt; integrates much more smoothly into the &lt;code&gt;ggplot2&lt;/code&gt; grammar. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The alluvia and the vertical features (the “strata”; here: origin, carrier, and destination) are implemented as different geometry layers. Note, that the default order of the strata features is reversed compared to &lt;code&gt;alluvial&lt;/code&gt;. Also: there are no gaps between the strata here compared to what &lt;code&gt;alluvial&lt;/code&gt; does. This makes it easier to add a y-axis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I decided not to change the default y-axis and subtle background grid lines, which provide quantitative information and guide the eye. Replace &lt;code&gt;theme_minimal()&lt;/code&gt; by &lt;code&gt;theme_void()&lt;/code&gt; to get very close to the &lt;code&gt;alluvial&lt;/code&gt; plot style.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By default, &lt;code&gt;ggalluvial&lt;/code&gt; plots the same number of flows between neighbouring strata. This behaviour can be changed by the &lt;code&gt;aes.bind=TRUE&lt;/code&gt; parameter in &lt;code&gt;geom_alluvial&lt;/code&gt;. Remove it to see the difference with a larger number of narrower flows between the origin and carrier strata.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are setting the colours manually. One advantage of &lt;code&gt;ggalluvial&lt;/code&gt; is that instead of a manual setting you can use any &lt;code&gt;ggplot2&lt;/code&gt; (or add-on) scale such as &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/scale_brewer.html&#34;&gt;&lt;code&gt;brewer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/scale_viridis.html&#34;&gt;&lt;code&gt;viridis&lt;/code&gt;&lt;/a&gt;. Similarly we can modify the plot &lt;a href=&#34;https://ggplot2.tidyverse.org/reference/theme.html&#34;&gt;&lt;code&gt;theme&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Instead of &lt;code&gt;geom_text&lt;/code&gt; you can use &lt;code&gt;geom_label&lt;/code&gt;, e.g. in combination with a different &lt;code&gt;fill&lt;/code&gt; colour in &lt;code&gt;geom_stratum&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In closing: both packages are versatile and provide somewhat different approaches to creating alluvial plots. If you are frequently working within the tidyverse then &lt;code&gt;ggalluvial&lt;/code&gt; might be more intuitive for you. Specific (edge) cases might be better handled by one tool than the other.&lt;/p&gt;
&lt;p&gt;For more information check out the respective vignettes for &lt;a href=&#34;https://cran.r-project.org/web/packages/ggalluvial/vignettes/ggalluvial.html&#34;&gt;&lt;code&gt;ggalluvial&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/alluvial/vignettes/alluvial.html&#34;&gt;&lt;code&gt;alluvial&lt;/code&gt;&lt;/a&gt; as well as their &lt;a href=&#34;https://github.com/corybrunson/ggalluvial&#34;&gt;pages&lt;/a&gt; on &lt;a href=&#34;https://github.com/mbojan/alluvial&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
</description>
    </item>

    <item>
      <title>Tidy evaluation in R - Simple Examples</title>
      <link>https://heads0rtai1s.github.io/2019/04/24/tidy-eval-examples/</link>
      <pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate>

      <guid>https://heads0rtai1s.github.io/2019/04/24/tidy-eval-examples/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;The &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt; philosophy introduced by &lt;a href=&#34;http://hadley.nz/&#34;&gt;Hadley Wickham&lt;/a&gt; has been a game changer for the &lt;a href=&#34;https://www.r-project.org/&#34;&gt;R&lt;/a&gt; community. It is based on intuitive rules of what a &lt;em&gt;tidy&lt;/em&gt; data set should look like: &lt;em&gt;each variable is a column, each observation is a row&lt;/em&gt; (&lt;a href=&#34;https://www.jstatsoft.org/article/view/v059i10&#34;&gt;Wickham 2014&lt;/a&gt;). At its core, the tidyverse collection of R packages is powered by a consistent grammar of data manipulation and visualisation.&lt;/p&gt;
&lt;p&gt;The tidyverse grammar makes it easier to manipulate data sets using simple expressions that reduce the syntactic overhead and allow you to focus on the data. Thus, packages like &lt;code&gt;dplyr&lt;/code&gt; or &lt;code&gt;tidyr&lt;/code&gt; are great for exploratory data analysis (EDA) and hands-on data wrangling. A small downside of this approach is that these tools require a bit more effort when using them in functions with variable parameters. In general you want to use functions to improve the reusability and reproducibility of your code.&lt;/p&gt;
&lt;p&gt;This is where the &lt;em&gt;tidy evaluation&lt;/em&gt; comes in. A few additional methods and concepts are sufficient to make all your tidy code run smoothly in a function context. Here I will go through some relatively simple examples to get you started.&lt;/p&gt;
&lt;p&gt;Before we begin we will need the following libraries:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;libs &amp;lt;- c(&amp;#39;dplyr&amp;#39;, &amp;#39;tibble&amp;#39;,              # wrangling
          &amp;#39;datasets&amp;#39;,                     # data
          &amp;#39;knitr&amp;#39;,&amp;#39;kableExtra&amp;#39;,           # table styling
          &amp;#39;ggplot2&amp;#39;,&amp;#39;gridExtra&amp;#39;)          # plots, panels
invisible(lapply(libs, library, character.only = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will use the &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/Orange.html&#34;&gt;Orange data set&lt;/a&gt;, which is part of the &lt;a href=&#34;https://www.rdocumentation.org/packages/datasets/versions/3.5.3&#34;&gt;datasets&lt;/a&gt; package and records the growth of 5 orange trees. Here are the first 5 rows:&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Tree
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
age
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
circumference
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
118
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
484
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
664
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
75
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1004
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
108
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Personally, I’m learning most efficiently by first looking at examples that show the code in action and then tweaking them to fit my needs. After playing with the code for a bit and inevitably breaking something I turn to the docs to understand more about the syntax and additional arguments of the function. Thus, all my posts on tools or methodology will follow the same pattern: I will jump right into the action by looking at a useful yet simple example or two. Next, I dissect this example, maybe break something, and explain the arguments. In closing, there will be a few more complex examples, caveats, pointers, and/or resources. Sounds good? Here we go:&lt;/p&gt;
&lt;p&gt;The first example is a function that takes as &lt;em&gt;input&lt;/em&gt; a data frame &lt;code&gt;df&lt;/code&gt; and a variable &lt;code&gt;var&lt;/code&gt; from that data frame (i.e. a column/feature). The &lt;em&gt;output&lt;/em&gt; is the difference between the (global) median and the mean of the variable. This is a realistic example of a concise helper function, since it goes beyond basic in-built tools and provides a quick check on whether a distribution is symmetric&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;median_minus_mean &amp;lt;- function(df, var){

  var &amp;lt;- enquo(var)

  df %&amp;gt;%
    summarise(foo = median(!!var) - mean(!!var)) %&amp;gt;%
    .$foo
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we apply it to the circumference of trees to find that the mean is larger than the median:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;median_minus_mean(Orange, circumference)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.8571429&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To understand how it works here are the 2 key concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Quoting:&lt;/strong&gt; In the body of the function, the variable &lt;code&gt;var&lt;/code&gt; is being quoted by the &lt;code&gt;enquo&lt;/code&gt; function (borrowed from the &lt;a href=&#34;https://cran.r-project.org/web/packages/rlang/index.html&#34;&gt;&lt;code&gt;rlang&lt;/code&gt; package&lt;/a&gt;). This essentially means that the &lt;em&gt;content&lt;/em&gt; (or &lt;em&gt;argument&lt;/em&gt;) of the variable is being encoded. The quotation stops this variable from being immediately evaluated. Instead, its content is being treated as a functional R expression.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Unquoting:&lt;/strong&gt; In order to tell a tidyverse verb like &lt;code&gt;summarise&lt;/code&gt; that you are passing it the content of a quoted variable you need to unquote it. Practically you are copy-pasting the variable expression into the verb. This is done using the &lt;code&gt;!!&lt;/code&gt; operator which Hadley wants to be pronounced &lt;em&gt;bang-bang&lt;/em&gt;. I can only surmise that he said that because it makes boring conversations about code sound like wild-west movie fights.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In most situations &lt;code&gt;enquo&lt;/code&gt; and &lt;code&gt;!!&lt;/code&gt; are all you need. Conceptually, there’s a bit more to it since &lt;code&gt;enquo&lt;/code&gt; encodes the current state of the environment along with the variable. This is a useful property, which makes &lt;code&gt;enquo&lt;/code&gt; aware of parameters defined outside a function, but for now you can ignore these finer details.&lt;/p&gt;
&lt;p&gt;(Talking about details: &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;bar&lt;/code&gt; are popular names for dummy variables in many programming languages. It’s just something that needs a name for the moment but can immediately be forgotten once its time-limited purpose is fulfilled.)&lt;/p&gt;
&lt;p&gt;Also: yes, this works:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;median_minus_mean &amp;lt;- function(df, var){
  df %&amp;gt;%
    summarise(foo = median(!!enquo(var)) - mean(!!enquo(var))) %&amp;gt;%
    .$foo
}
median_minus_mean(Orange, circumference)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.8571429&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can quote and unquote in the same step. Let’s go a bit further and include grouping by another variable, here the &lt;code&gt;age&lt;/code&gt; of the trees:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;median_minus_mean &amp;lt;- function(df, var, gvar){

  var &amp;lt;- enquo(var)
  gvar &amp;lt;- enquo(gvar)

  df %&amp;gt;%
    group_by(!!gvar) %&amp;gt;%
    summarise(foo = median(!!var) - mean(!!var)) %&amp;gt;%
    .$foo
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;median_minus_mean(Orange, circumference, age)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -1.0  0.2 -6.2 -9.2 -3.6  0.6  1.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Turns out that for some ages the mean circumference is smaller than the median.&lt;/p&gt;
&lt;p&gt;Good news: quote/unquote also works for ggplot2. Here we quote the x, y, and colour-group variables of our plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_growth_tree &amp;lt;- function(df, xvar, yvar, gvar){

  xvar &amp;lt;- enquo(xvar)
  yvar &amp;lt;- enquo(yvar)
  gvar &amp;lt;- enquo(gvar)

  df %&amp;gt;%
    ggplot(aes(!!xvar, !!yvar, col = !!gvar)) +
    geom_line()
}

plot_growth_tree(Orange, age, circumference, Tree)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-24-tidy-eval-examples_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Some trees grow faster than others.&lt;/p&gt;
&lt;p&gt;In fact, ggplot2 is a great use case because it allows us to quickly built helper functions if we need to repeat a certain plot for many similar features. Individual modification to those templates can be added using the ggplot2 grammar. Here is a histogram example where we add a custom title to the second plot&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_hist &amp;lt;- function(df, var, bins, bcol){

  var &amp;lt;- enquo(var)

  df %&amp;gt;%
    ggplot(aes(!!var)) +
    geom_histogram(bins = bins, fill = bcol, col = &amp;quot;black&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- plot_hist(Orange, age, 4, &amp;quot;blue&amp;quot;)
p2 &amp;lt;- plot_hist(Orange, circumference, 7, &amp;quot;red&amp;quot;) +
  ggtitle(&amp;quot;A custom title&amp;quot;)

grid.arrange(p1, p2, layout_matrix = rbind(c(1,2)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-24-tidy-eval-examples_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You see that here the number of histogram bins and the plot colour are being passed to the function as normal integer and string - without need of being quoted. This works because these parameters are not R expressions.&lt;/p&gt;
&lt;p&gt;There will be a second post soon about more complex tidy evaluation examples. If you’re interested, watch this space.&lt;/p&gt;
&lt;p&gt;In the meantime: Curious about the bigger picture?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href=&#34;https://tidyeval.tidyverse.org/&#34;&gt;tidy evaluation book&lt;/a&gt; is a great starting guide into the concepts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This &lt;a href=&#34;https://community.rstudio.com/t/interesting-tidy-eval-use-cases/21121/31&#34;&gt;thread&lt;/a&gt; collects some typical use cases for tidy evaluation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For a concise 5 minute intro to the main concepts by the man himself watch Hadley here:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/nERXS3ssntw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;If you are actually interested in the skewness of a distribution you can find a &lt;code&gt;skewness&lt;/code&gt; function in the &lt;a href=&#34;https://cran.r-project.org/package=e1071&#34;&gt;&lt;code&gt;e1071&lt;/code&gt; package&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;The arranging of plots into panel layouts is done by the &lt;a href=&#34;https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html&#34;&gt;&lt;code&gt;grid.arrange&lt;/code&gt;&lt;/a&gt; function of the &lt;a href=&#34;https://cran.r-project.org/web/packages/gridExtra/index.html&#34;&gt;&lt;code&gt;gridExtra&lt;/code&gt;&lt;/a&gt; package.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>

  </channel>
</rss>
